<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BLUR VINTAGE ★ AAA</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.2/font/bootstrap-icons.css">
    <link rel="stylesheet" href="/styles/landingpage.css">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

    <style>
           .search-result-item {
    padding: 15px 20px; /* Increased padding for better size */
    border-bottom: 1px solid #eee;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 15px; /* Slightly increased gap between icon and text */
    font-size: 1.1rem; /* Increased font size */
}

.search-result-item:hover {
    background-color: #f8f9fa;
}

.search-result-item img {
    width: 50px; /* Increased size of the image */
    height: 50px;
    object-fit: cover;
}

.search-result-info {
    flex: 1;
}

.search-result-name {
    font-weight: 600; /* Slightly bolder text */
    margin-bottom: 5px; /* Increased margin for spacing */
    font-size: 1rem; /* Adjusted font size */
}

.search-result-price {
    color: #666;
    font-size: 0.95rem; /* Adjusted font size for price */
}

.form-select-sm {
    padding-right: 2rem;
    background-color: white;
    border: 1px solid #dee2e6;
    border-radius: 4px;
    font-size: 1rem; /* Increased font size for dropdown */
    padding: 10px; /* Increased padding inside select box */
}

.form-select-sm:focus {
    border-color: black;
    box-shadow: none;
}

@media (max-width: 768px) {
    .search-container {
        max-width: 100%;
    }

    .nav-menu a {
        padding: 1rem 2rem; /* Larger padding for nav items */
        font-size: 1.2rem; /* Adjusted font size */
    }

    .icon-link {
        margin-left: 1rem;
        font-size: 1.5rem; /* Larger icon size */
    }
}

        </style>
    </head>

    <!-- header starts -->
    <body>
        <header class="py-3 bg-light">
            <div class="container">
                <div class="row align-items-center">

                    
                    <!-- Left Section -->
                    <div class="col-4 d-flex align-items-center justify-content-start">
                        <a href="#" class="text-dark me-3 text-decoration-none">Contact Us</a>
                    </div>
        
                    <!-- Center Section -->
                    <div class="col-4 text-center">
                        <a class="m-0" style="font-family: 'Joan';font-size: 25px; text-decoration: none; color: black;" href="/user/home">BLUR VINTAGE ★</a>
                    </div>
        
                    <!-- Right Section -->
                    <div class="col-lg-3 col-md-4">
                        <div class="d-flex align-items-center justify-content-end">
                            <form id="searchForm" class="d-flex" role="search" method="GET">
                                <div class="position-relative w-100">
                                    <input 
                                        class="form-control me-2" 
                                        type="search" 
                                        placeholder="Search products..." 
                                        aria-label="Search"
                                        name="search"
                                        id="searchInput"
                                        value="<%= locals.search || '' %>"
                                    >
                                    <div id="searchSuggestions" class="position-absolute w-100 bg-white shadow-sm d-none" style="top: 100%; z-index: 1000;"></div>
                                </div>
                                <button class="btn btn-outline-dark" type="submit">Search</button>
                            </form>
                            <% if (locals.user) { %>
                              
                                <a class="bi bi-person me-3" style="font-size: 1.5rem; color: black;" href="/user/manage"></a>
                                <div class="position-relative me-3">
                                    <a class="bi bi-cart" href="/user/cart" style="font-size: 1.5rem; color: black;"></a>
                                    <span id="cartCounter" class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" 
                                          style="font-size: 0.75rem; margin-top: 5px;">
                                        0
                                    </span>
                                </div>
                                <div class="position-relative me-3">
                                    <a class="bi bi-heart" style="font-size: 1.5rem; color: black;" href="/user/wishlist"></a>
                                    <span id="wishlist-counter" class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" 
                                          style="font-size: 0.75rem; margin-top: 5px; display: none;">
                                        0
                                    </span>
                                </div>
                            <% } else { %>
                                <a href="/user/login" class="text-dark text-decoration-none me-2">Login</a>
                                <span class="text-dark mx-2">|</span>
                                <a href="/user/register" class="text-dark text-decoration-none">Signup</a>
                            <% } %>
                        </div>
                    </div>
                </div>
        
                <!-- Men, Women, Kids Navigation -->
                <div class="row mt-3">
                    <div class="col-12 text-center">
                        <nav class="nav justify-content-center">
                            <a class="nav-link mx-4 text-dark" href="/user/shop" style="font-size: 1.2rem;">Shop</a>
                            <a class="nav-link mx-4 text-dark" href="/user/men" style="font-size: 1.2rem;">Men</a>
                            <a class="nav-link mx-4 text-dark" href="/user/women" style="font-size: 1.2rem;">Women</a>
                            <a class="nav-link mx-4 text-dark" href="/user/kids" style="font-size: 1.2rem;">Kids</a>
                        </nav>
                    </div>
                </div>

                <div class="row mt-3">
                    <div class="col-12 d-flex justify-content-end pe-4">
                        <select id="sortSelect" class="form-select form-select-sm" style="width: auto;">
                            <option value="default" disabled selected>Sort By</option>
                            <option value="price-high-low">Price: High to Low</option>
                            <option value="price-low-high">Price: Low to High</option>
                            <option value="name-a-z">Name: A to Z</option>
                            <option value="name-z-a">Name: Z to A</option>
                            <option value="new-arrivals">New Arrivals</option>
                        </select>
                    </div>
                </div>
            </div>
        </header>
        <!-- header ends -->

        <!-- <script src="/js/dynamic-sorting.js"></script> -->
        <script>



document.addEventListener('DOMContentLoaded', function() {
    // const sortSelect = document.getElementById('sortSelect');
    const productsGrid = document.querySelector('.row.g-2.g-sm-3.g-md-4');
    const paginationContainer = document.querySelector('.pagination-container');
    const searchInput = document.getElementById("searchInput");
    const searchForm = document.getElementById('searchForm');
    const searchSuggestions = document.getElementById('searchSuggestions');
    let currentPath = window.location.pathname;



    function getCategory() {
        switch(currentPath) {
            case '/user/men':
                return 'men';
            case '/user/women':
                return 'women';
            case '/user/kids':
                return 'kids';
            default:
                return '';
        }
    }


    searchForm.action = currentPath;



    function getCurrentPageContext() {
        const path = window.location.pathname;
        if (path.includes('/men')) return 'men';
        if (path.includes('/women')) return 'women';
        if (path.includes('/kids')) return 'kids';
        if (path.includes('/shop')) return 'shop';
        return '';
    }

  


    function formatPrice(price) {
        return `Rs/-${price.toLocaleString()}`;
    } 



    function createSearchSuggestionItem(product) {
        const displayPrice = product.discount > 0 
            ? `<span class="search-result-price">
                <span class="text-decoration-line-through text-muted">${formatPrice(product.originalPrice)}</span>
                <span class="ms-2">${formatPrice(product.finalPrice)}</span>
               </span>`
            : `<span class="search-result-price">${formatPrice(product.originalPrice)}</span>`;

        return `
            <div class="search-result-item" data-product-id="${product._id}">
                <img src="${product.variants[0]?.productImage?.[0] || '/images/default-product.jpg'}" 
                     alt="${escapeHtml(product.productName)}" 
                     class="search-result-image">
                <div class="search-result-info">
                    <div class="search-result-name">${escapeHtml(product.productName)}</div>
                    ${displayPrice}
                    ${product.discount > 0 
                        ? `<span class="badge bg-danger ms-2">${product.discount}% OFF</span>` 
                        : ''}
                </div>
            </div>`;
    }



    async function handleSearchSuggestions(query) {
    if (!query.trim() || query.length < 2) {
        searchSuggestions.classList.add('d-none');
        return;
    }

    try {
        const category = getCategory();
        const response = await fetch(`/user/search?q=${encodeURIComponent(query)}&suggest=true&category=${category}`);
        const data = await response.json();

        if (data.suggestions && data.suggestions.length > 0) {
            const suggestionsHTML = data.suggestions.map(product => `
                <div class="search-result-item" data-product-id="${product._id}">
                    <img src="${product.variants[0]?.productImage?.[0] || '/images/default-product.jpg'}" 
                         alt="${product.productName}" 
                         class="search-result-image">
                    <div class="search-result-info">
                        <div class="search-result-name">${product.productName}</div>
                        <div class="search-result-price">Rs/-${product.variants[0]?.price || 0}</div>
                    </div>
                </div>
            `).join('');
            
            searchSuggestions.innerHTML = suggestionsHTML;
            searchSuggestions.classList.remove('d-none');

            // Add click handlers for suggestions
            document.querySelectorAll('.search-result-item').forEach(item => {
                item.addEventListener('click', () => {
                    window.location.href = `/user/buy?id=${item.dataset.productId}`;
                });
            });
        } else {
            searchSuggestions.innerHTML = '<div class="p-3 text-muted">No products found</div>';
            searchSuggestions.classList.remove('d-none');
        }
    } catch (error) {
        console.error('Error fetching search suggestions:', error);
    }
}

// Replace your existing performSearch function with this:
async function performSearch(query, sort = 'default', page = 1) {
    try {
        const currentPath = window.location.pathname;
        const url = new URL(window.location.href);
        
        // Set search parameters
        url.searchParams.set('search', query);
        if (sort !== 'default') {
            url.searchParams.set('sort', sort);
        }
        url.searchParams.set('page', page);

        // Make the fetch request to the current page's endpoint
        const response = await fetch(`${currentPath}?${url.searchParams.toString()}`, {
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        });

        const data = await response.json();
        
        if (data.products && data.products.length > 0) {
            // Update the products grid
            const productsHTML = data.products
                .map(product => `
                    <div class="col-6 col-sm-4 col-lg-3">
                        <div class="product-card">
                            <div class="product-image-container">
                                <button class="heart-btn" data-product-id="${product._id}">
                                    <i class="fa-regular fa-heart"></i>
                                </button>
                                <a href="/user/buy?id=${product._id}" class="product-link">
                                    <img src="${product.variants[0]?.productImage?.[0] || '/images/default-product.jpg'}" 
                                         alt="${product.productName}" 
                                         class="img-fluid">
                                </a>
                            </div>
                            <h3 class="product-title">${product.productName}</h3>
                            <div class="price-section">
                                ${product.discount > 0 
                                    ? `<p class="card-text mb-0">
                                        <span class="original-price text-muted text-decoration-line-through">
                                            Rs/-${product.originalPrice}
                                        </span>
                                        <span class="discounted-price ms-2">
                                            Rs/-${product.finalPrice}
                                        </span>
                                       </p>
                                       <div class="offer-badge">
                                           <span class="badge bg-danger">
                                               ${product.discount}% OFF - ${product.offerName}
                                           </span>
                                       </div>`
                                    : `<p class="product-price" style="font-weight: bolder;">
                                        Rs/-${product.originalPrice}
                                       </p>`
                                }
                            </div>
                        </div>
                    </div>
                `).join('');
            
            // Update the products grid
            const productsGrid = document.querySelector('.row.g-2.g-sm-3.g-md-4');
            if (productsGrid) {
                productsGrid.innerHTML = productsHTML;
            }

            // Update pagination if it exists
            const paginationContainer = document.querySelector('.pagination-container');
            if (paginationContainer && data.totalPages > 1) {
                paginationContainer.innerHTML = createPagination(data);
                attachPaginationListeners();
            }

            // Update URL without page reload
            window.history.pushState({}, '', `${currentPath}?${url.searchParams.toString()}`);

        } else {
            // Show no results message
            const productsGrid = document.querySelector('.row.g-2.g-sm-3.g-md-4');
            if (productsGrid) {
                productsGrid.innerHTML = `
                    <div class="col-12 text-center py-5">
                        <h3>No products found</h3>
                        <p>Try different search terms or browse our categories</p>
                    </div>`;
            }
        }

        // Reattach event listeners
        updateWishlistCounter();
        updateCartCounter();

    } catch (error) {
        console.error('Error performing search:', error);
    }
}

// Update your search input event listeners:
if (searchInput) {
    let searchTimeout;
    
    // Real-time search suggestions
    searchInput.addEventListener('input', function() {
        clearTimeout(searchTimeout);
        const query = this.value;

        searchTimeout = setTimeout(() => {
            handleSearchSuggestions(query);
        }, 300); // Debounce time
    });

    // Handle form submission
    searchForm.addEventListener('submit', function(e) {
        e.preventDefault();
        const query = searchInput.value.trim();
        if (query) {
            searchSuggestions.classList.add('d-none');
            performSearch(query, sortSelect.value);
        }
    });

    // Close suggestions when clicking outside
    document.addEventListener('click', function(e) {
        if (!searchInput.contains(e.target) && !searchSuggestions.contains(e.target)) {
            searchSuggestions.classList.add('d-none');
        }
    });
}


        // searchInput.addEventListener('keypress', function(e) {
        //     if (e.key === 'Enter') {
        //         e.preventDefault();
        //         const query = this.value.trim();
        //         if (query) {
        //             searchResults.style.display = 'none';
        //             performSearch(query);
        //         }
        //     }
        // });


    updateWishlistCounter();
     updateCartCounter()
    
    
    function updateURLParameter(url, param, value) {
        const regex = new RegExp(`([?&])${param}=.*?(&|$)`, 'i');
        const separator = url.indexOf('?') !== -1 ? '&' : '?';
        
        if (url.match(regex)) {
            return url.replace(regex, `$1${param}=${value}$2`);
        }
        return `${url}${separator}${param}=${value}`;
    }


    function createProductCard(product) {
        return `
            <div class="col-6 col-sm-4 col-lg-3">
                <div class="product-card">
                    <div class="product-image-container">
                        <button class="heart-btn" data-product-id="${product._id}">
                            <i class="fa-regular fa-heart"></i>
                        </button>
                        <a href="/user/buy?id=${product._id}" class="product-link">
                            <img src="${product.variants[0]?.productImage?.[0] || '/images/default-product.jpg'}" 
                                 alt="${product.productName}" 
                                 class="img-fluid">
                        </a>
                    </div>
                    <h3 class="product-title">${product.productName}</h3>
                    <div class="price-section">
                        ${product.discount > 0 
                            ? `<p class="card-text mb-0">
                                <span class="original-price text-muted text-decoration-line-through">
                                    Rs/-${product.originalPrice}
                                </span>
                                <span class="discounted-price ms-2">
                                    Rs/-${product.finalPrice}
                                </span>
                               </p>
                               <div class="offer-badge">
                                   <span class="badge bg-danger">
                                       ${product.discount}% OFF - ${product.offerName}
                                   </span>
                               </div>`
                            : `<p class="product-price" style="font-weight: bolder;">
                                Rs/-${product.originalPrice}
                               </p>`
                        }
                    </div>
                </div>
            </div>`;
    }


    function createPagination(data) {
        if (!data.totalPages || data.totalPages <= 1) return '';
        
        let html = `
            <nav aria-label="Product pagination">
                <ul class="pagination">`;

        if (data.hasPrevPage) {
            html += `
                <li class="page-item">
                    <a class="page-link" href="#" data-page="${data.prevPage}">Previous</a>
                </li>`;
        }

        for (let i = 1; i <= data.totalPages; i++) {
            html += `
                <li class="page-item ${i === data.currentPage ? 'active' : ''}">
                    <a class="page-link" href="#" data-page="${i}">${i}</a>
                </li>`;
        }

        if (data.hasNextPage) {
            html += `
                <li class="page-item">
                    <a class="page-link" href="#" data-page="${data.nextPage}">Next</a>
                </li>`;
        }

        html += `
                </ul>
            </nav>`;
        return html;
    }

   
    async function updateProducts(sort, page = 1) {
        try {
            const currentUrl = new URL(window.location.href);
            const updatedUrl = updateURLParameter(currentUrl.toString(), 'sort', sort);
            const finalUrl = updateURLParameter(updatedUrl, 'page', page);
            
            // Update URL without reload
            window.history.pushState({}, '', finalUrl);

            const response = await fetch(`${finalUrl}&xhr=true`, {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            });

            const data = await response.json();
            
            // Update products grid
            let productsHTML = '';
            data.products.forEach(product => {
                productsHTML += createProductCard(product);
            });
            productsGrid.innerHTML = productsHTML;

            // Update pagination
            if (paginationContainer) {
                paginationContainer.innerHTML = createPagination(data);
                attachPaginationListeners();
            }

            // Reattach event listeners for heart buttons
            

        } catch (error) {
            console.error('Error updating products:', error);
        }
    }

    const sortSelect = document.getElementById('sortSelect');
    if (sortSelect) {
        sortSelect.addEventListener('change', function() {
            const currentQuery = new URL(window.location.href).searchParams.get('search') || '';
            performSearch(currentQuery, this.value);
        });
    }
});





// for updating cart counter
   async function updateCartCounter(){
    try {
        const response  = await fetch('/user/cart/count');

        if (!response.ok) {
            throw new Error('Failed to fetch cart count');
        }

        const data = await response.json();
        console.log("cart counter",data )
        const counter = document.getElementById('cartCounter');

        if(counter){
            counter.textContent = data.count || '0';

            counter.style.display = data.count >0 ? "block" : "none";
        }


    } catch (error) {
        console.log("error in cart counter",error.message);
        
    }
   }

   // for updating wishlist counter
     async function updateWishlistCounter() {
      try {
        const response = await fetch('/user/wishlist/count');
        const data = await response.json();

        const wishlistCounter = document.getElementById('wishlist-counter');
        if (wishlistCounter) {
            wishlistCounter.textContent = data.wishlistCount;
            wishlistCounter.style.display = data.wishlistCount > 0 ? 'inline-block' : 'none';
        }


     } catch (error) {
        console.error("Error updating wishlist counter:", error);
     }
 }
// ========   FOR REMOVING SUGGETIONS WHILE CLICKING ON OUTSIDE =========


    </script>