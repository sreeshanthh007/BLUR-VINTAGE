<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Reset Password - BLUR VINTAGE</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .header-bg {
            background-color: #e0e0e0;
            padding: 1.5rem;
            margin-bottom: 3rem;
        }

        .brand {
            font-size: 2rem;
            font-weight: 500;
            letter-spacing: 1px;
        }

        .reset-container {
            max-width: 600px;
            margin: 0 auto;
            padding: 2rem 1rem;
        }

        .form-control {
            background-color: #e0e0e0;
            border: none;
            border-radius: 50px;
            padding: 1rem 1.5rem;
            font-size: 1rem;
            margin-bottom: 0.5rem;
            transition: border 0.3s ease;
        }

        .form-control:focus {
            background-color: #e0e0e0;
            box-shadow: none;
        }

        .form-control.is-invalid {
            border: 2px solid #dc3545;
        }

        .form-control.is-valid {
            border: 2px solid #198754;
        }

        .reset-btn {
            background-color: #e0e0e0;
            border: none;
            color: #000;
            padding: 0.75rem 3.5rem;
            font-size: 1.1rem;
            transition: background-color 0.3s ease;
            margin-top: 2rem;
        }

        .reset-btn:disabled {
            background-color: #f0f0f0;
            color: #666;
            cursor: not-allowed;
        }

        .reset-btn:hover:not(:disabled) {
            background-color: #d0d0d0;
        }

        .form-label {
            font-size: 1.25rem;
            margin-bottom: 1rem;
        }

        .error-text {
            color: #dc3545;
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }

        .valid-text {
            color: #198754;
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }

        .password-requirements {
            margin-top: 0.5rem;
            padding-left: 1.5rem;
            list-style-type: none;
        }

        .requirement {
            font-size: 0.875rem;
            color: #666;
            margin-bottom: 0.25rem;
            position: relative;
        }

        .requirement::before {
            content: '✕';
            position: absolute;
            left: -1.5rem;
            color: #dc3545;
        }

        .requirement.met::before {
            content: '✓';
            color: #198754;
        }

        @media (max-width: 576px) {
            .brand {
                font-size: 1.5rem;
            }

            .reset-container {
                padding: 1rem;
            }

            .form-label {
                font-size: 1.1rem;
            }

            .reset-btn {
                padding: 0.75rem 2.5rem;
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <!-- Header -->
    <header class="header-bg text-center">
        <h1 class="brand mb-0">BLUR VINTAGE ★</h1>
    </header>

    <!-- Main Content -->
    <main class="container">
        <div class="reset-container">
            <h2 class="text-center mb-5">RESET YOUR PASSWORD</h2>
            
            <form id="resetPasswordForm" novalidate>
                <div class="mb-4">
                    <label for="newPassword" class="form-label">Enter your new Password</label>
                    <input type="password" 
                           class="form-control" 
                           id="newPassword" 
                           required
                           minlength="8"
                           autocomplete="new-password">
                    <ul class="password-requirements" id="passwordRequirements">
                        <li class="requirement" id="length">At least 8 characters long</li>
                        <li class="requirement" id="uppercase">Contains uppercase letter</li>
                        <li class="requirement" id="lowercase">Contains lowercase letter</li>
                        <li class="requirement" id="number">Contains number</li>
                        <li class="requirement" id="special">Contains special character (!@#$%^&*)</li>
                    </ul>
                </div>

                <div class="mb-4">
                    <label for="confirmPassword" class="form-label">Confirm your new password</label>
                    <input type="password" 
                           class="form-control" 
                           id="confirmPassword" 
                           required
                           minlength="8"
                           autocomplete="new-password">
                    <div id="passwordMatch" class="error-text"></div>
                </div>

                <div class="text-center">
                    <button type="submit" class="reset-btn" id="submitBtn" disabled>
                        RESET
                    </button>
                </div>
            </form>
        </div>
    </main>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        const form = document.getElementById('resetPasswordForm');
        const newPasswordInput = document.getElementById('newPassword');
        const confirmPasswordInput = document.getElementById('confirmPassword');
        const passwordMatch = document.getElementById('passwordMatch');
        const submitBtn = document.getElementById('submitBtn');

        // Password requirements
        const requirements = {
            length: { regex: /.{8,}/, element: document.getElementById('length') },
            uppercase: { regex: /[A-Z]/, element: document.getElementById('uppercase') },
            lowercase: { regex: /[a-z]/, element: document.getElementById('lowercase') },
            number: { regex: /[0-9]/, element: document.getElementById('number') },
            special: { regex: /[!@#$%^&*]/, element: document.getElementById('special') }
        };

        function validatePassword(password) {
            let isValid = true;
            
            // Check each requirement
            for (const [key, requirement] of Object.entries(requirements)) {
                const meetsRequirement = requirement.regex.test(password);
                requirement.element.classList.toggle('met', meetsRequirement);
                if (!meetsRequirement) isValid = false;
            }

            return isValid;
        }

        function validateForm() {
            const password = newPasswordInput.value;
            const confirmPass = confirmPasswordInput.value;
            const isPasswordValid = validatePassword(password);
            const doPasswordsMatch = password === confirmPass && confirmPass !== '';

            // Update UI
            newPasswordInput.classList.toggle('is-valid', isPasswordValid);
            newPasswordInput.classList.toggle('is-invalid', !isPasswordValid && password !== '');
            
            confirmPasswordInput.classList.toggle('is-valid', doPasswordsMatch);
            confirmPasswordInput.classList.toggle('is-invalid', !doPasswordsMatch && confirmPass !== '');

            // Update match message
            if (confirmPass !== '') {
                passwordMatch.textContent = doPasswordsMatch ? 'Passwords match!' : 'Passwords do not match';
                passwordMatch.className = doPasswordsMatch ? 'valid-text' : 'error-text';
            } else {
                passwordMatch.textContent = '';
            }

            // Enable/disable submit button
            submitBtn.disabled = !(isPasswordValid && doPasswordsMatch);
        }

        // Add event listeners
        newPasswordInput.addEventListener('input', validateForm);
        confirmPasswordInput.addEventListener('input', validateForm);

        // Form submission handler
        form.addEventListener('submit', async function(e) {
            e.preventDefault();

            const newPassword = newPasswordInput.value;
            const email = sessionStorage.getItem("email");

            if (!email) {
                alert('Email not found. Please try the reset process again.');
                return;
            }

            try {
                const response = await fetch("/user/reset-password", {
                    method: "post",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({ newPassword, email })
                });
                
                const data = await response.json();
                
                if (response.ok) {
                    alert(data.message);
                    window.location.href = "/user/login";
                } else {
                    alert(data.message || 'Password reset failed. Please try again.');
                }
            } catch (error) {
                console.error("Error resetting password:", error);
                alert('An error occurred. Please try again later.');
            }
        });
    </script>
</body>
</html>