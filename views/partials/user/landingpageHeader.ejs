<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BLUR VINTAGE ★ AAA</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.2/font/bootstrap-icons.css">
    <link rel="stylesheet" href="/styles/landingpage.css">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

    <style>
           .search-result-item {
    padding: 15px 20px; /* Increased padding for better size */
    border-bottom: 1px solid #eee;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 15px; /* Slightly increased gap between icon and text */
    font-size: 1.1rem; /* Increased font size */
}

.search-result-item:hover {
    background-color: #f8f9fa;
}

.search-result-item img {
    width: 50px; /* Increased size of the image */
    height: 50px;
    object-fit: cover;
}

.search-result-info {
    flex: 1;
}

.search-result-name {
    font-weight: 600; /* Slightly bolder text */
    margin-bottom: 5px; /* Increased margin for spacing */
    font-size: 1rem; /* Adjusted font size */
}

.search-result-price {
    color: #666;
    font-size: 0.95rem; /* Adjusted font size for price */
}

.form-select-sm {
    padding-right: 2rem;
    background-color: white;
    border: 1px solid #dee2e6;
    border-radius: 4px;
    font-size: 1rem; /* Increased font size for dropdown */
    padding: 10px; /* Increased padding inside select box */
}

.form-select-sm:focus {
    border-color: black;
    box-shadow: none;
}

@media (max-width: 768px) {
    .search-container {
        max-width: 100%;
    }

    .nav-menu a {
        padding: 1rem 2rem; /* Larger padding for nav items */
        font-size: 1.2rem; /* Adjusted font size */
    }

    .icon-link {
        margin-left: 1rem;
        font-size: 1.5rem; /* Larger icon size */
    }
}

        </style>
    </head>

    <!-- header starts -->
    <body>
        <header class="py-3 bg-light">
            <div class="container">
                <div class="row align-items-center">

                    
                    <!-- Left Section -->
                    <div class="col-4 d-flex align-items-center justify-content-start">
                        <a href="#" class="text-dark me-3 text-decoration-none">Contact Us</a>
                    </div>
        
                    <!-- Center Section -->
                    <div class="col-4 text-center">
                        <a class="m-0" style="font-family: 'Joan';font-size: 25px; text-decoration: none; color: black;" href="/user/home">BLUR VINTAGE ★</a>
                    </div>
        
                    <!-- Right Section -->
                    <div class="col-lg-3 col-md-4">
                        <div class="d-flex align-items-center justify-content-end">
                            <form class="d-flex me-3 position-relative">
                                <input id="searchInput" class="form-control form-control-sm" type="text" placeholder="Search..." oninput="searchProducts()" aria-label="Search">
                                <button class="btn btn-outline-dark btn-md" type="submit">
                                    <i class="bi bi-search"></i>
                                </button>
                                <!-- Add this div for search results -->
                                <div id="searchResults" class="position-absolute w-100 bg-white shadow-sm rounded-bottom" 
                                    style="top: 100%; left: 0; z-index: 1000; display: none; max-height: 400px; overflow-y: auto;">
                                </div>
                            </form> 
                            <% if (locals.user) { %>
                              
                                <a class="bi bi-person me-3" style="font-size: 1.5rem; color: black;" href="/user/manage"></a>
                                <div class="position-relative me-3">
                                    <a class="bi bi-cart" href="/user/cart" style="font-size: 1.5rem; color: black;"></a>
                                    <span id="cartCounter" class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" 
                                          style="font-size: 0.75rem; margin-top: 5px;">
                                        0
                                    </span>
                                </div>
                                <div class="position-relative me-3">
                                    <a class="bi bi-heart" style="font-size: 1.5rem; color: black;" href="/user/wishlist"></a>
                                    <span id="wishlist-counter" class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" 
                                          style="font-size: 0.75rem; margin-top: 5px; display: none;">
                                        0
                                    </span>
                                </div>
                            <% } else { %>
                                <a href="/user/login" class="text-dark text-decoration-none me-2">Login</a>
                                <span class="text-dark mx-2">|</span>
                                <a href="/user/register" class="text-dark text-decoration-none">Signup</a>
                            <% } %>
                        </div>
                    </div>
                </div>
        
                <!-- Men, Women, Kids Navigation -->
                <div class="row mt-3">
                    <div class="col-12 text-center">
                        <nav class="nav justify-content-center">
                            <a class="nav-link mx-4 text-dark" href="/user/shop" style="font-size: 1.2rem;">Shop</a>
                            <a class="nav-link mx-4 text-dark" href="/user/men" style="font-size: 1.2rem;">Men</a>
                            <a class="nav-link mx-4 text-dark" href="/user/women" style="font-size: 1.2rem;">Women</a>
                            <a class="nav-link mx-4 text-dark" href="/user/kids" style="font-size: 1.2rem;">Kids</a>
                        </nav>
                    </div>
                </div>

                <div class="row mt-3">
                    <div class="col-12 d-flex justify-content-end pe-4">
                        <select id="sortSelect" class="form-select form-select-sm" style="width: auto;">
                            <option value="default" disabled selected>Sort By</option>
                            <option value="price-high-low">Price: High to Low</option>
                            <option value="price-low-high">Price: Low to High</option>
                            <option value="name-a-z">Name: A to Z</option>
                            <option value="name-z-a">Name: Z to A</option>
                            <option value="new-arrivals">New Arrivals</option>
                        </select>
                    </div>
                </div>
            </div>
        </header>
        <!-- header ends -->


        <script>


document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('searchInput');
    const searchResults = document.getElementById('searchResults');
    const sortSelect = document.getElementById('sortSelect');
    const searchButton = document.querySelector('.btn-outline-dark');
    let debounceTimer;

   
        updateWishlistCounter()
       
        updateCartCounter()
   
    function getCurrentCategory() {
        const path = window.location.pathname;
        if (path.includes('/men')) return 'men';
        if (path.includes('/women')) return 'women';
        if (path.includes('/kids')) return 'kids';
        return '';
    }

    function escapeRegExp(string) {
        return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }

   
    function highlightMatch(text, query) {
        if (!query) return text;
        const regex = new RegExp(`(${escapeRegExp(query)})`, 'gi');
        return text.replace(regex, '<strong>$1</strong>');
    }

    async function searchProducts(query) {
    try {
        const currentPath = window.location.pathname;
        const sortValue = sortSelect ? sortSelect.value : 'default';
        
        // Create URLSearchParams object for cleaner URL construction
        const searchParams = new URLSearchParams();
        
        // Add search query if it exists
        if (query.trim()) {
            searchParams.set('search', query);
        }
        
      
        if (sortValue !== 'default') {
            searchParams.set('sort', sortValue);
        }
        
        // Set category and page context based on current path
        if (currentPath.includes('/shop')) {
            searchParams.set('page_context', 'shop');
        } else if (currentPath.includes('/men')) {
            searchParams.set('category', 'men');
        } else if (currentPath.includes('/women')) {
            searchParams.set('category', 'women');
        } else if (currentPath.includes('/kids')) {
            searchParams.set('category', 'kids');
        }
        
        // Navigate to the search URL with all parameters
        window.location.href = `/user/search?${searchParams.toString()}`;
    } catch (error) {
        console.error('Search error:', error);
    }
}

// Update the suggestion fetch as well
searchInput.addEventListener('input', (e) => {
    const query = e.target.value.trim();
    const currentPath = window.location.pathname;
    
    if (query.length >= 2) {
        clearTimeout(debounceTimer);
        debounceTimer = setTimeout(async () => {
            try {
                // Build search params for suggestions
                const searchParams = new URLSearchParams({
                    search: query,
                    suggest: 'true'
                });
                
                // Add appropriate context
                if (currentPath.includes('/shop')) {
                    searchParams.set('page_context', 'shop');
                } else {
                    const currentCategory = getCurrentCategory();
                    if (currentCategory) {
                        searchParams.set('category', currentCategory);
                    }
                }

                const response = await fetch(`/user/search?${searchParams.toString()}`);
                const data = await response.json();

                if (data.products && data.products.length > 0) {
                    const resultsHtml = data.products.map(product => `
                        <div class="search-result-item" onclick="window.location.href='/user/buy?id=${product._id}'">
                            <img src="${product.variants[0]?.productImage[0] || '/images/default-product.jpg'}" 
                                alt="${product.productName}">
                            <div class="search-result-info">
                                <div class="search-result-name">
                                    ${highlightMatch(product.productName, query)}
                                </div>
                                <div class="search-result-price">
                                    Rs/-${product.variants[0]?.price || 'Price not available'}
                                </div>
                            </div>
                        </div>
                    `).join('');

                    searchResults.innerHTML = resultsHtml;
                    searchResults.style.display = 'block';
                } else {
                    searchResults.innerHTML = '<div class="p-3 text-center text-muted">No products found</div>';
                    searchResults.style.display = 'block';
                }
            } catch (error) {
                console.error('Suggestion error:', error);
            }
        }, 300);
    } else {
        searchResults.style.display = 'none';
    }   
});

    // Handle form submission
    searchInput.closest('form').addEventListener('submit', (e) => {
        e.preventDefault();
        const query = searchInput.value.trim();
        searchProducts(query);
    });

    searchButton.addEventListener('click', (e) => {
        e.preventDefault();
        const query = searchInput.value.trim();
        searchProducts(query);
    })
   
    document.addEventListener('click', (e) => {
        if (!searchInput.contains(e.target) && !searchResults.contains(e.target)) {
            searchResults.style.display = 'none';
        }
    });

   // Update the sort select event listener
if (sortSelect) {
    sortSelect.addEventListener('change', (e) => {
        e.preventDefault(); // Prevent default form submission
        const currentPath = window.location.pathname;
        const sortValue = sortSelect.value;
        const searchParams = new URLSearchParams(window.location.search);
        
        // Update sort parameter
        if (sortValue !== 'default') {
            searchParams.set('sort', sortValue);
        } else {
            searchParams.delete('sort');
        }

        // Keep the existing search query if present
        const searchQuery = document.getElementById('searchInput')?.value;
        if (searchQuery) {
            searchParams.set('search', searchQuery);
        }

        // Keep the current page context
        let targetPath = currentPath;
        
        // Determine the correct path based on current location
        if (currentPath.includes('/shop')) {
            targetPath = '/user/shop';
        } else if (currentPath.includes('/men')) {
            targetPath = '/user/men';
        } else if (currentPath.includes('/women')) {
            targetPath = '/user/women';
        } else if (currentPath.includes('/kids')) {
            targetPath = '/user/kids';
        }

        // Make AJAX request instead of full page reload
        fetch(`${targetPath}?${searchParams.toString()}`, {
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => response.json())
        .then(data => {
            // Update URL without page reload
            window.history.pushState({}, '', `${targetPath}?${searchParams.toString()}`);
            
            // Update the product grid
            updateProductGrid(data.products);
            
            // Update pagination if needed
            updatePagination(data);
        })
        .catch(error => {
            console.error('Error updating products:', error);
        });
    });
}

// Function to update product grid
function updateProductGrid(products) {
    const productContainer = document.querySelector('.product-grid') || document.querySelector('.row.products');
    if (!productContainer) return;

    const productsHtml = products.map(product => `
        <div class="col-md-3 mb-4">
            <div class="card h-100">
                <img src="${product.variants[0]?.productImage[0] || '/images/default-product.jpg'}" 
                     class="card-img-top" alt="${product.productName}">
                <div class="card-body">
                    <h5 class="card-title">${product.productName}</h5>
                    <div class="price-section">
                        ${product.discount > 0 ? `
                            <span class="final-price">₹${product.finalPrice}</span>
                            <span class="original-price text-decoration-line-through">₹${product.originalPrice}</span>
                            <span class="discount text-success">${product.discount}% off</span>
                        ` : `
                            <span class="final-price">₹${product.originalPrice}</span>
                        `}
                    </div>
                    ${product.offerName ? `<div class="offer-badge">${product.offerName}</div>` : ''}
                </div>
            </div>
        </div>
    `).join('');

    productContainer.innerHTML = productsHtml;
}

// Function to update pagination
function updatePagination(data) {
    const paginationContainer = document.querySelector('.pagination');
    if (!paginationContainer) return;

    const { currentPage, totalPages, hasNextPage, hasPrevPage } = data;
    
    const paginationHtml = `
        <ul class="pagination justify-content-center">
            ${hasPrevPage ? `
                <li class="page-item">
                    <a class="page-link" href="?page=${data.prevPage}" data-page="${data.prevPage}">Previous</a>
                </li>
            ` : ''}
            
            <li class="page-item ${currentPage === 1 ? 'active' : ''}">
                <a class="page-link" href="?page=1" data-page="1">1</a>
            </li>
            
            ${totalPages > 1 ? Array.from({ length: Math.min(totalPages - 1, 3) }, (_, i) => `
                <li class="page-item ${currentPage === i + 2 ? 'active' : ''}">
                    <a class="page-link" href="?page=${i + 2}" data-page="${i + 2}">${i + 2}</a>
                </li>
            `).join('') : ''}
            
            ${hasNextPage ? `
                <li class="page-item">
                    <a class="page-link" href="?page=${data.nextPage}" data-page="${data.nextPage}">Next</a>
                </li>
            ` : ''}
        </ul>
    `;

    paginationContainer.innerHTML = paginationHtml;
}
});



// for updating cart counter
   async function updateCartCounter(){
    try {
        const response  = await fetch('/user/cart/count');

        if (!response.ok) {
            throw new Error('Failed to fetch cart count');
        }

        const data = await response.json();
        console.log("cart counter",data )
        const counter = document.getElementById('cartCounter');

        if(counter){
            counter.textContent = data.count || '0';

            counter.style.display = data.count >0 ? "block" : "none";
        }


    } catch (error) {
        console.log("error in cart counter",error.message);
        
    }
   }

   // for updating wishlist counter
     async function updateWishlistCounter() {
      try {
        const response = await fetch('/user/wishlist/count');
        const data = await response.json();

        const wishlistCounter = document.getElementById('wishlist-counter');
        if (wishlistCounter) {
            wishlistCounter.textContent = data.wishlistCount;
            wishlistCounter.style.display = data.wishlistCount > 0 ? 'inline-block' : 'none';
        }
     } catch (error) {
        console.error("Error updating wishlist counter:", error);
     }
 }
// ========   FOR REMOVING SUGGETIONS WHILE CLICKING ON OUTSIDE =========

   document.addEventListener('click', (e) => {
    const searchBox = document.getElementById('searchInput');
    const searchResults = document.getElementById('searchResults');
    
 
    if (!searchBox?.contains(e.target) && !searchResults?.contains(e.target)) {
        if (searchResults) {
            searchResults.style.display = 'none';
        }
    }
});

    </script>