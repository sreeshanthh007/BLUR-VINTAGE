    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>BLUR VINTAGE - Checkout</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
        <style>
            /* Custom CSS */
            .search-input {
                background-color: #f8f9fa;
                border-radius: 50px;
                padding-left: 40px;
            }
            
            .search-icon {
                position: absolute;
                left: 15px;
                top: 50%;
                transform: translateY(-50%);
                color: #6c757d;
            }

            .product-image {
                max-width: 150px;
                width: 100%;
                height: auto;
            }

            .rating {
                color: #198754;
            }

            .payment-option {
                border: 1px solid #dee2e6;
                border-radius: 8px;
                padding: 15px;
                margin-bottom: 10px;
                cursor: pointer;
            }

            .payment-option.active {
            
                background-color: #f8f9fa;
            }

            .confirm-btn {
                background-color: #212529;
                border: none;
                padding: 12px 24px;
            }

            .confirm-btn:hover {
                background-color: #343a40;
            }

            .social-links {
                gap: 20px;
            }

            .social-links a {
                color: #212529;
                text-decoration: none;
            }

            footer {
                background-color: #f8f9fa;
            }
        </style>
    </head>
    <body class="bg-light">
        <!-- Header -->
        <%-include('../../views/partials/user/header.ejs')%>

        <!-- Main Content -->
        <main class="container py-5">
            <div class="row g-4">
                <!-- Checkout Form -->
                <div class="col-lg-8">
                    <!-- Product Summary -->
                    <% cart.items.forEach(item => { %>
                        <div class="bg-white p-4 rounded shadow-sm mb-4">
                            <div class="d-flex gap-4 align-items-center">
                                <img src="<%= item.productImage %>" alt="<%= item.product.productName %>" class="product-image">
                                <div>
                                    <h2 class="h5 mb-2"><%= item.product.productName %></h2>
                                    <p class="mb-2">Size: <%= item.size %> | Color: <%= item.colorName %></p>
                                    <p class="h5 mb-2">
                                        PRICE: Rs. <span class="order-summary-item-price"><%= item.discountedPrice || item.price %></span>
                                        <% if (item.discountedPrice) { %>
                                            <small class="text-muted text-decoration-line-through">Rs. <%= item.price %></small>
                                        <% } %>
                                    </p>
                                    <p class="mb-2">Quantity: <span class="order-summary-item-quantity"><%= item.quantity %></span></p>
                                    <p class="text-success mb-0">Free shipping</p>
                                </div>
                            </div>
                        </div>
                    <% }); %>
        
                    <!-- Delivery Address -->
                    <div class="bg-white p-4 rounded shadow-sm mb-4">
                        <h3 class="h5 mb-4">Delivery Address</h3>
                        <% if (address) { %>
                            <div class="mb-3">
                                <label class="form-label">Name</label>
                                <input type="text" class="form-control" value="<%= address.name %>" readonly>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Phone</label>
                                <input type="text" class="form-control" value="<%= address.phone %>" readonly>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Address</label>
                                <textarea class="form-control" rows="3" id="address" readonly> landMark: <%= address.landMark %>, city :  <%= address.city %>, state:  <%= address.state %>, country:  <%= address.country %> pincode : <%= address.pincode %></textarea>
                            </div>
                        <% } else { %>
                            <p class="text-danger">No delivery address found. Please add an address.</p>
                        <% } %>
                        <button type="button" class="btn btn-link p-0" onclick="window.location.href='/user/address/add'">
                            <%= address ? 'Change delivery address' : 'Add a delivery address' %>
                        </button>
                    </div>


                    <div class="modal fade" id="addressSelectionModal" tabindex="-1" aria-labelledby="addressSelectionModalLabel" aria-hidden="true">
                        <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content">
                            <div class="modal-header">
                            <h5 class="modal-title" id="addressSelectionModalLabel">Select Delivery Address</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                            <div id="addressList">
                                <!-- Address cards will be dynamically populated here -->
                            </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                <button type="button" class="btn btn-primary" id="toggleAddAddress">Add New Address</button>
                            </div>
                        </div>
                        </div>
                    </div>
        
                    <!-- Payment Options -->
                    <div class="bg-white p-4 rounded shadow-sm mb-4">
                        <h3 class="h5 mb-4">Payment Options</h3>
                        <div class="payment-option active">
                            <div class="form-check">
                                <%if(cart.totalAmount<1000){%>
                                <input class="form-check-input" type="radio" name="payment" id="cod" checked>
                                <label class="form-check-label" for="cod">Cash on delivery</label>
                                <%}else{%>
                                    <div class="form-check"> 
                                <input class="form-check-input" type="hidden" name="payment" id="cod" checked>
                                <label class="form-check-label" for="cod">Cash on delivery not available</label>
                                </div>
                                <%}%>
                            </div>
                        </div>
                        <div class="payment-option">
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="payment" id="razorpay">
                                <label class="form-check-label" for="razorpay">Pay Online (Razorpay)</label>
                            </div>
                        </div>
                        <div class="payment-option">
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="payment" id="wallet">
                                <label class="form-check-label" for="wallet">
                                    Pay with Wallet
                                    <% if (typeof walletBalance !== 'undefined') { %>
                                        <small class="d-block text-muted">
                                            Available Balance: ₹<span id="wallet-balance"><%= walletBalance.toFixed(2) %></span>
                                            <% if (walletBalance < cart.totalAmount) { %>
                                                <span class="text-danger">(Insufficient Balance)</span>
                                            <% } %>
                                        </small>
                                    <% } %>
                                </label>
                            </div>
                        </div>
                    </div>
        
                    <!-- Coupon -->
                    <div class="bg-white p-4 rounded shadow-sm">
                        <div class="row g-2">
                            <div class="col">
                                <input type="text" class="form-control" placeholder="Coupon code">
                            </div>
                            <div class="col-auto">
                                <button class="btn btn-dark" onclick="applyCoupon()">Apply code</button>
                            </div>
                        </div>
                    </div>
                </div>
        
                <!-- Order Summary -->
                <div class="col-lg-4">
                    <div class="bg-white p-4 rounded shadow-sm">
                        <h3 class="h5 mb-4">Order Summary</h3>
                        <div class="d-flex justify-content-between mb-2">
                            <span>Order value</span>
                            <span class="order-summary-subtotal">Rs. <%= cart.totalAmount.toFixed(2) %></span>
                        </div>
                        <div class="d-flex justify-content-between mb-3">
                            <span>Delivery charge</span>
                            <span class="delivery-charge"><%= "free shipping"%></span>
                        </div>
                        <div class="d-flex justify-content-between mb-4">
                            <span class="fw-bold">Total</span>
                            <span class="fw-bold order-summary-total">Rs. <%= (cart.totalAmount).toFixed(2) %></span>
                        </div>
                        <button class="btn btn-dark w-100 confirm-btn" <%= !address ? 'disabled' : '' %>>
                            Confirm order
                        </button>
                        <% if (!address) { %>
                            <p class="text-danger small mt-2 mb-0">Please add a delivery address to proceed</p>
                        <% } %>
                    </div>

                    <div class="mt-4">
                        <h5 class="mb-4">Available Coupons</h5>
                        <% if (coupons && coupons.length > 0) { %>
                            <% coupons.forEach(coupon => { %>
                                <div class="border rounded p-3 mb-2 position-relative" style="background-color: white;">
                                    <div class="d-flex justify-content-between align-items-start">
                                        <div>
                                            <span class="badge bg-primary mb-2"><%= coupon.code %></span>
                                            <p class="mb-1 small"><%= coupon.description %></p>
                                            <p class="mb-0 text-muted small">
                                                Min order: Rs. <%= coupon.minimumOrderAmount %>
                                            </p>
                                        </div>
                                        <div class="text-end">
                                            <div class="text-success fw-bold">
                                                <%= coupon.discountType === 'Percentage' ? 
                                                    `${coupon.discountValue}% OFF` : 
                                                    `Rs. ${coupon.discountValue} OFF` %>
                                            </div>
                                        </div>
                                    </div>
                                    <% if (coupon.endDate) { %>
                                        <div class="text-muted small mt-2">
                                            Valid till: <%= new Date(coupon.endDate).toLocaleDateString() %>
                                        </div>
                                    <% } %>
                                </div>
                            <% }); %>
                        <% } else { %>
                            <div class="alert alert-info">
                                No coupons available for this order
                            </div>
                        <% } %>
                    </div>
                </div>
            </div>
        </main>

        <!-- Footer -->
        <%-include('../../views/partials/user/footer.ejs')%>

        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    </body>
    </html>

    <script>



    async function applyCoupon() {
        const couponInput = document.querySelector('input[placeholder="Coupon code"]');
        const couponCode = couponInput.value.trim();
        

        if (!couponCode) {
            Swal.fire({
                icon: "error",
                title: "Invalid Coupon",
                text: "Please enter a coupon code"
            });
            return;
        }
        try {
            const response = await fetch('/user/applyCoupon', {
                method: "post",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({couponCode})
            });

            const data = await response.json();
            console.log("data in coupn ",data)
            if (data.success) {

                const orderSummary = document.querySelector('.col-lg-4 .bg-white.p-4.rounded.shadow-sm');
                const subtotalElement = orderSummary.querySelector('.order-summary-subtotal');
                const totalElement = orderSummary.querySelector('.order-summary-total');

                
                const couponContainer = couponInput.closest('.row');
                couponContainer.style.display = 'none';

              
             let couponDetailsDiv = document.getElementById('coupon-details');
            if (!couponDetailsDiv) {
                couponDetailsDiv = document.createElement('div');
                couponDetailsDiv.id = 'coupon-details';
                couponDetailsDiv.classList.add('mb-3');
                
                // Find the last summary item and insert before total
                const summaryItems = orderSummary.querySelectorAll('.d-flex.justify-content-between');
                const lastSummaryItem = summaryItems[summaryItems.length - 1];
                orderSummary.insertBefore(couponDetailsDiv, totalElement.closest('.d-flex.justify-content-between'));
            }


            couponDetailsDiv.innerHTML = `
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <span>Coupon (${couponCode})</span>
                        <span class="text-success">-Rs. ${data.discountAmount.toFixed(2)}</span>
                    </div>
                    <button class="btn btn-sm btn-outline-danger" onclick="clearCoupon()">
                        <i class="bi bi-x"></i> Clear
                    </button>
                </div>
            `;
                

                // Update total
                const originalSubtotal = parseFloat(subtotalElement.textContent.replace('Rs. ', ''));
                const newTotal = originalSubtotal - data.discountAmount;
                totalElement.textContent = `Rs. ${newTotal.toFixed(2)}`;
                
                Swal.fire({
                    icon: "success",
                    title: "Coupon Applied",
                    text: `You saved Rs. ${data.discountAmount.toFixed(2)}`
                });
            } else {
                Swal.fire({
                    icon: "error",
                    title: "Failed to Apply Coupon",
                    text: data.message
                });
            }
        } catch (error) {
            Swal.fire({
                icon: "error",
                title: error.message,
                text: data.message  
            });
        }
    }


    // =======function to remove the applied coupon=============//

    function clearCoupon(){

    const orderSummary = document.querySelector('.col-lg-4 .bg-white.p-4.rounded.shadow-sm');
     const subtotalElement = orderSummary.querySelector('.order-summary-subtotal');
      const totalElement = orderSummary.querySelector('.order-summary-total');
     const couponDetailsDiv = document.getElementById('coupon-details');
     const couponInput = document.querySelector('input[placeholder="Coupon code"]');
    const couponContainer = couponInput.closest('.row');


    if(couponDetailsDiv){
        couponDetailsDiv.remove()
    }

    couponContainer.style.display = 'flex';
    couponInput.value = '';

    
    const originalSubtotal = parseFloat(subtotalElement.textContent.replace('Rs.',''));
    totalElement.textContent     = `Rs.${originalSubtotal.toFixed(2)}`

    Swal.fire({
        icon:"success",
        title:"removed",
        text:"coupon removed successfully"
    })

    }
        
        // Frontend JavaScript for handling the modal and address selection
    document.addEventListener('DOMContentLoaded', function() {
        
        const changeAddressBtn = document.querySelector('button[onclick="window.location.href=\'/user/address/add\'"]');
        if (changeAddressBtn) {
            changeAddressBtn.onclick = showAddressModal;
        }

        async function showAddressModal(e) {
            e.preventDefault();
            
            try {
                const response = await fetch('/user/addresses');
                const addresses = await response.json();
                
                const addressList = document.getElementById('addressList');
                addressList.innerHTML = `
                    <!-- Existing Addresses -->
                    <div class="existing-addresses mb-4">
                        ${addresses.map(address => `
                            <div class="card mb-3">
                                <div class="card-body">
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" 
                                            name="addressSelection" 
                                            value="${address._id}"
                                            id="address_${address._id}">
                                        <label class="form-check-label" for="address_${address._id}">
                                            <strong>${address.name}</strong><br>
                                            ${address.phone}<br>
                                            ${address.landMark}, ${address.city},<br>
                                            ${address.state}, ${address.country} - ${address.pincode}
                                        </label>
                                    </div>
                                </div>
                            </div>
                        `).join('')}
                    </div>

                    <!-- Add New Address Form -->
                    <div class="add-address-form" style="display: none;">
                        <form id="newAddressForm">
                            <div class="mb-3">
                                <label class="form-label">Name</label>
                                <input type="text" class="form-control" name="name" required>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Phone</label>
                                <input type="tel" class="form-control" name="phone" required>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Landmark</label>
                                <input type="text" class="form-control" name="landMark" required>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">City</label>
                                <input type="text" class="form-control" name="city" required>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">State</label>
                                <input type="text" class="form-control" name="state" required>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Country</label>
                                <input type="text" class="form-control" name="country" required>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Pincode</label>
                                <input type="text" class="form-control" name="pincode" required>
                            </div>
                            <button type="submit" class="btn btn-primary">Save Address</button>
                        </form>
                    </div>`;

                // Update modal footer
                const modalFooter = document.querySelector('.modal-footer');
                modalFooter.innerHTML = `
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="toggleAddAddress">Add New Address</button>
                `;

                // Add event listeners
                document.querySelectorAll('input[name="addressSelection"]').forEach(radio => {
                    radio.addEventListener('change', handleAddressSelection);
                });

                document.getElementById('toggleAddAddress').addEventListener('click', toggleAddressForm);
                document.getElementById('newAddressForm').addEventListener('submit', handleNewAddress);

                // Show the modal
                const modal = new bootstrap.Modal(document.getElementById('addressSelectionModal'));
                modal.show();
            } catch (error) {
                console.error('Error fetching addresses:', error);
            }
        }

        function toggleAddressForm() {
            const existingAddresses = document.querySelector('.existing-addresses');
            const addAddressForm = document.querySelector('.add-address-form');
            const toggleBtn = document.getElementById('toggleAddAddress');

            if (addAddressForm.style.display === 'none') {
                existingAddresses.style.display = 'none';
                addAddressForm.style.display = 'block';
                toggleBtn.textContent = 'Show Existing Addresses';
            } else {
                existingAddresses.style.display = 'block';
                addAddressForm.style.display = 'none';
                toggleBtn.textContent = 'Add New Address';
            }
        }

        async function handleAddressSelection(e) {
        const selectedAddressId = e.target.value;
        
        
        try {
            const response = await fetch('/user/update-address', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ addressId: selectedAddressId })
            });

            if (response.ok) {
                const data = await response.json();
                console.log("data",data)
            window.location.reload();
            } else {
                throw new Error('Failed to update address');
            }
        } catch (error) {
            console.error('Error updating address:', error);
            alert('Failed to update delivery address. Please try again.');
        }
    }
    function handleNewAddress(e) {
    e.preventDefault();
    
    // Get form and form data
    const form = e.target;
    const formData = new FormData(form);
    const addressData = Object.fromEntries(formData.entries());
    
    // Reset previous error messages
    clearErrors(form);
    
    // Validation rules
    const validations = {
        name: {
            pattern: /^[a-zA-Z\s]{3,50}$/,
            message: "Name should be 3-50 characters long and contain only letters"
        },
        phone: {
            pattern: /^[0-9]{10}$/,
            message: "Please enter a valid 10-digit phone number"
        },
        landMark: {
            pattern: /^[a-zA-Z0-9\s,.-]{3,100}$/,
            message: "Landmark should be 3-100 characters long"
        },
        city: {
            pattern: /^[a-zA-Z\s]{3,50}$/,
            message: "City should contain only letters and be 3-50 characters long"
        },
        state: {
            pattern: /^[a-zA-Z\s]{3,50}$/,
            message: "State should contain only letters and be 3-50 characters long"
        },
        country: {
            pattern: /^[a-zA-Z\s]{3,50}$/,
            message: "Country should contain only letters and be 3-50 characters long"
        },
        pincode: {
            pattern: /^[0-9]{6}$/,
            message: "Please enter a valid 6-digit pincode"
        }
    };

   
    let hasErrors = false;
    Object.keys(validations).forEach(field => {
        const value = addressData[field]?.trim();
        const validation = validations[field];

        
        if (!value) {
            showError(form, field, `${field.charAt(0).toUpperCase() + field.slice(1)} is required`);
            hasErrors = true;
            return;
        }

        // Check pattern
        if (!validation.pattern.test(value)) {
            showError(form, field, validation.message);
            hasErrors = true;
        }
    });

    if (hasErrors) {
        return;
    }

   
    submitAddress(addressData);
}


function showError(form, field, message) {
    const input = form.querySelector(`[name="${field}"]`);
    const errorDiv = input.parentElement.querySelector('.error-message') || 
                    createErrorElement(input);
    
    input.classList.add('is-invalid');
    errorDiv.textContent = message;
    errorDiv.style.display = 'block';
}


function createErrorElement(input) {
    const errorDiv = document.createElement('div');
    errorDiv.className = 'error-message text-danger small mt-1';
    input.parentElement.appendChild(errorDiv);
    return errorDiv;
}


function clearErrors(form) {
    form.querySelectorAll('.is-invalid').forEach(input => {
        input.classList.remove('is-invalid');
    });
    form.querySelectorAll('.error-message').forEach(error => {
        error.style.display = 'none';
    });
}


async function submitAddress(addressData) {
    try {
        const response = await fetch('/user/addresses', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(addressData)
        });

        const data = await response.json();

        if (response.ok) {
            Swal.fire({
                icon: 'success',
                title: 'Success',
                text: 'Address added successfully',
                timer: 1500,
                showConfirmButton: false
            }).then(() => {
                window.location.reload();
            });
        } else {
            throw new Error(data.message || 'Failed to add address');
        }
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to add address. Please try again.'
        });
    }
}



        function addInputListeners(form) {
    const inputs = form.querySelectorAll('input');
    inputs.forEach(input => {
        input.addEventListener('input', () => {
            const field = input.name;
            const validation = validations[field];
            const value = input.value.trim();

            clearErrors(form);

            if (validation && value) {
                if (!validation.pattern.test(value)) {
                    showError(form, field, validation.message);
                }
            }
        });
    });
}


        const formHTML = `
    <form id="newAddressForm" novalidate>
        <div class="mb-3">
            <label class="form-label">Name*</label>
            <input type="text" class="form-control" name="name" required 
                   placeholder="Enter full name">
        </div>
        <div class="mb-3">
            <label class="form-label">Phone*</label>
            <input type="tel" class="form-control" name="phone" required 
                   placeholder="10-digit mobile number">
        </div>
        <div class="mb-3">
            <label class="form-label">Landmark*</label>
            <input type="text" class="form-control" name="landMark" required 
                   placeholder="Nearby landmark">
        </div>
        <div class="mb-3">
            <label class="form-label">City*</label>
            <input type="text" class="form-control" name="city" required 
                   placeholder="Enter city">
        </div>
        <div class="mb-3">
            <label class="form-label">State*</label>
            <input type="text" class="form-control" name="state" required 
                   placeholder="Enter state">
        </div>
        <div class="mb-3">
            <label class="form-label">Country*</label>
            <input type="text" class="form-control" name="country" required 
                   placeholder="Enter country">
        </div>
        <div class="mb-3">
            <label class="form-label">Pincode*</label>
            <input type="text" class="form-control" name="pincode" required 
                   placeholder="6-digit pincode">
        </div>
        <button type="submit" class="btn btn-primary">Save Address</button>
    </form>
`;
    
    
        //======= PAYMENT METHODS FETCH FUNCTIONS //=================

        let orderCreated = false;

        const confirmBtn = document.querySelector(".confirm-btn");

        confirmBtn.addEventListener('click',async()=>{
            // get the selected payment method
            const selectedPayment = document.querySelector('input[name="payment"]:checked');

            if(!selectedPayment){
                Swal.fire({
                    icon:"error",
                    title:"please select a payment method"
                });
                return;
            }


            

            const addressElement = document.getElementById("address");

            if(!addressElement || !addressElement.value.trim()){
                Swal.fire({
                    icon:"error",
                    title:"please select a delivery address"
                });
                return;
            }


             if (selectedPayment.id === 'wallet') {
           const walletBalance = parseFloat(document.getElementById('wallet-balance')?.textContent || '0');
           const cartTotal = parseFloat(document.querySelector('.order-summary-total').textContent.replace('Rs. ', ''));
        
           if (walletBalance < cartTotal) {
            Swal.fire({
                icon: "error",
                title: "Insufficient Balance",
                text: `Your wallet balance (Rs. ${walletBalance.toFixed(2)}) is insufficient for this purchase (Rs. ${cartTotal.toFixed(2)})`
             });
             return;
        }
    }
            const orderData = {
            cart: {
                items: <%- JSON.stringify(cart.items) %>,
                totalAmount: <%= cart.totalAmount %>
            },
            address: <%- JSON.stringify(address) %>,
            paymentMethod: selectedPayment.id.toUpperCase(),
            coupon: {
            code: document.querySelector('input[placeholder="Coupon code"]').value.trim()
        }
    };

            try {
                const response = await fetch("/user/order/place",{
                    method:"post",
                    headers:{
                        "Content-Type":"application/json"
                    },
                    body:JSON.stringify(orderData)
                });

                const result = await response.json();

            
            if (result.success) {
                if (selectedPayment.id === 'razorpay') {
                    // Handle Razorpay payment
                    const options = {
                        key: result.razorpayKeyId,
                        amount: result.amount,
                        currency: "INR",
                        name: "BLUR VINTAGE ⭐",
                        description: "Purchase Payment",
                        order_id: result.razorpayOrderId,
                        handler: async function (response) {
                            // Handle the success payment
                            try {
                                const verifyResponse = await fetch('/user/order/verify-payment', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify({
                                        razorpay_order_id: response.razorpay_order_id,
                                        razorpay_payment_id: response.razorpay_payment_id,
                                        razorpay_signature: response.razorpay_signature,
                                        cart: orderData.cart,
                                        address: orderData.address,
                                        coupon:orderData.coupon
                                    })
                                });

                                const verifyResult = await verifyResponse.json();
                                if (verifyResult.success) {
                                    Swal.fire({
                                        icon: "success",
                                        title: "Payment successful",
                                        text: `Order number: ${verifyResult.orderNumber}`,
                                        confirmButtonText: "OK"
                                    }).then(() => {
                                        window.location.href = "/user/thankYou";
                                    });
                                } else {
                                    throw new Error(verifyResult.message);
                                }
                            } catch (error) {
                                Swal.fire({
                                    icon: "error",
                                    title: "Payment verification failed",
                                    text: error.message
                                });
                            
                            }
                        },
                        prefill: {
                            name: address.name,
                            contact: address.phone
                        },
                        theme: {
                            color: "#212529"
                        },
                        modal: {
            ondismiss: async function() {
                  if (!orderCreated) {  // Now this flag is properly defined
                try {
                    await fetch('/user/order/payment-failed', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            razorpayOrderId: result.razorpayOrderId,
                            cart: orderData.cart,
                            address: orderData.address,
                            coupon: orderData.coupon
                        })
                    });
                    orderCreated = true;  // Set flag after successful order creation
                } catch (error) {
                    console.error('Error handling payment dismissal:', error);
                }
            }
        }
    }  
};  
                 
                    const rzp = new Razorpay(options);
                    rzp.open();
                    // Handle payment failure
                    rzp.on('payment.failed',async function(response){
                        if(!orderCreated){

                            try {
                            const failureResponse = await fetch('/user/order/payment-failed',{
                                method:"post",
                                headers:{
                                    "Content-Type":"application/json"
                                },
                                body:JSON.stringify({
                                    razorpayOrderId: result.razorpayOrderId,
                                  failureDetails: response.error,
                                cart: orderData.cart,
                                address: orderData.address,
                                coupon: orderData.coupon
                                })
                            });

                            const failureResult = await failureResponse.json();

                            if(failureResult.success){
                                orderCreated = true;
                                Swal.fire({
                                icon: "warning",
                                title: "Payment Failed",
                                text: `Order created with pending payment. Order number: ${failureResult.orderNumber}`,
                                confirmButtonText: "View Orders"
                            }).then(() => {
                                window.location.href = "/user/order-details";
                            });
                         }else{
                            throw new Error(failureResult.message);
                         }

                        } catch (error) {
                            console.error('Error handling payment failure:', error);
                        Swal.fire({
                            icon: "error",
                            title: "Error",
                            text: "Failed to process payment failure. Please contact support."
                        });
                        }

                        }
                     
                    })
                } else if (selectedPayment.id === 'wallet') {

                    const walletBalance = parseFloat(document.getElementById('wallet-balance').textContent);
                    const orderTotal = parseFloat(document.querySelector('.order-summary-total').textContent.replace('Rs. ', ''));
                    const newBalance = walletBalance - orderTotal;

                    Swal.fire({
                        icon: "success",
                        title: "Payment Successful",
                        html: `
                            <div>
                                <p>Order placed successfully</p>
                                <p>Order number: ${result.orderNumber}</p>
                                <p>Amount paid: Rs. ${orderTotal.toFixed(2)}</p>
                                <p>New wallet balance: Rs. ${newBalance.toFixed(2)}</p>
                            </div>
                        `,
                        confirmButtonText: "Continue"
                    }).then(() => {
                        window.location.href = "/user/thankYou";
                    });
                } else {
                    // Handle COD payment success
                    Swal.fire({
                        icon: "success",
                        title: "Order placed successfully",
                        text: `Order number: ${result.orderNumber}`,
                        confirmButtonText: "Thanks"
                    }).then(() => {
                        window.location.href = "/user/thankYou";
                    });
                }
            } else {
                throw new Error(result.message);
            }
        } catch (error) {
            console.error("Failed to place order:", error);
            Swal.fire({
                icon: "error",
                title: "Failed to place order",
                text: error.message
            });
        }
        })
        
    });



// document.addEventListener('DOMContentLoaded', function() {
//     const walletRadio = document.getElementById('wallet');
//     const walletBalance = parseFloat(document.getElementById('wallet-balance')?.textContent || '0');
//     const cartTotalElement = document.querySelector('.order-summary-total');
//     const cartTotal = parseFloat(cartTotalElement.textContent.replace('Rs. ', ''));

//     // Disable wallet radio if balance is insufficient
//     if (walletRadio && walletBalance < cartTotal) {
//         walletRadio.disabled = true;
//         walletRadio.closest('.payment-option').style.opacity = '0.7';
//     }

//     // Update your existing confirm button click handler
//     const confirmBtn = document.querySelector(".confirm-btn");
//     confirmBtn.addEventListener('click', async () => {
//         const selectedPayment = document.querySelector('input[name="payment"]:checked');

//         if (!selectedPayment) {
//             Swal.fire({
//                 icon: "error",
//                 title: "Please select a payment method"
//             });
//             return;
//         }

//         const addressElement = document.getElementById("address");
//         if (!addressElement || !addressElement.value.trim()) {
//             Swal.fire({
//                 icon: "error",
//                 title: "Please select a delivery address"
//             });
//             return;
//         }

//         // Check wallet balance if wallet payment is selected
//         if (selectedPayment.id === 'wallet') {
//             const currentTotal = parseFloat(document.querySelector('.order-summary-total').textContent.replace('Rs. ', ''));
//             if (walletBalance < currentTotal) {
//                 Swal.fire({
//                     icon: "error",
//                     title: "Insufficient Balance",
//                     text: `Your wallet balance (Rs. ${walletBalance.toFixed(2)}) is insufficient for this purchase (Rs. ${currentTotal.toFixed(2)})`
//                 });
//                 return;
//             }
//         }

//         const orderData = {
//             cart: {
//                 items: <%- JSON.stringify(cart.items) %>,
//                 totalAmount: parseFloat(document.querySelector('.order-summary-total').textContent.replace('Rs. ', ''))
//             },
//             address: <%- JSON.stringify(address) %>,
//             paymentMethod: selectedPayment.id === 'wallet' ? 'Wallet' : selectedPayment.id.toUpperCase(),
//             coupon: {
//                 code: document.querySelector('input[placeholder="Coupon code"]').value.trim()
//             }
//         };

//         try {
//             const response = await fetch("/user/order/place", {
//                 method: "post",
//                 headers: {
//                     "Content-Type": "application/json"
//                 },
//                 body: JSON.stringify(orderData)
//             });

//             const result = await response.json();

//             if (result.success) {
//                 if (selectedPayment.id === 'razorpay') {
//                     // Your existing Razorpay handling code remains unchanged
//                     // ...
//                 } else if (selectedPayment.id === 'wallet') {
//                     // Handle successful wallet payment
//                     Swal.fire({
//                         icon: "success",
//                         title: "Payment Successful",
//                         html: `
//                             <div>
//                                 <p>Order placed successfully</p>
//                                 <p>Order number: ${result.orderNumber}</p>
//                                 <p>Amount paid: Rs. ${orderData.cart.totalAmount.toFixed(2)}</p>
//                                 <p>New wallet balance: Rs. ${(walletBalance - orderData.cart.totalAmount).toFixed(2)}</p>
//                             </div>
//                         `,
//                         confirmButtonText: "Continue"
//                     }).then(() => {
//                         window.location.href = "/user/thankYou";
//                     });
//                 } else if(selectedPayment.id === "COD"){
//                            Swal.fire({
//                         icon: "success",
//                         title: "Order placed successfully",
//                         text: `Order number: ${result.orderNumber}`,
//                         confirmButtonText: "Continue"
//                     }).then(() => {
//                         window.location.href = "/user/thankYou";
//                     });
//                 }
           
//             }else {
//                 throw new Error(result.message);
//             }
//         } catch (error) {
//             console.error("Failed to place order:", error);
//             Swal.fire({
//                 icon: "error",
//                 title: "Failed to place order",
//                 text: error.message || "An error occurred while processing your order"
//             });
//         }
//     });

//     // Update wallet balance check when coupon is applied or removed
//     function updateWalletPaymentAvailability() {
//         const currentTotal = parseFloat(document.querySelector('.order-summary-total').textContent.replace('Rs. ', ''));
//         const walletRadio = document.getElementById('wallet');
        
//         if (walletRadio) {
//             if (walletBalance < currentTotal) {
//                 walletRadio.disabled = true;
//                 walletRadio.checked = false;
//                 walletRadio.closest('.payment-option').style.opacity = '0.7';
//                 if (document.getElementById('wallet-balance')) {
//                     document.getElementById('wallet-balance').parentElement.innerHTML = 
//                         `Available Balance: ₹${walletBalance.toFixed(2)} <span class="text-danger">(Insufficient Balance)</span>`;
//                 }
//             } else {
//                 walletRadio.disabled = false;
//                 walletRadio.closest('.payment-option').style.opacity = '1';
//                 if (document.getElementById('wallet-balance')) {
//                     document.getElementById('wallet-balance').parentElement.innerHTML = 
//                         `Available Balance: ₹${walletBalance.toFixed(2)}`;
//                 }
//             }
//         }
//     }


//     const orderSummaryTotal = document.querySelector('.order-summary-total');
//     if (orderSummaryTotal) {
//         const observer = new MutationObserver(updateWalletPaymentAvailability);
//         observer.observe(orderSummaryTotal, { childList: true, characterData: true, subtree: true });
//     }
// });

    </script>