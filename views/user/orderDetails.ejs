<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Order Details - BLUR VINTAGE ★</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;700&display=swap" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.2/font/bootstrap-icons.css">
    
    <style>
        /* Main content styles */
        .main-content {
            padding: 20px;
            background-color: #f5f5f5;
            min-height: 100vh;
        }

        /* Order card styles */
        .order-card {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
            padding: 20px;
        }

        .order-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid #eee;
            padding-bottom: 15px;
            margin-bottom: 20px;
        }

        .order-number {
            font-size: 1.2rem;
            font-weight: bold;
        }

        /* Status badges */
        .order-status {
            padding: 5px 10px;
            border-radius: 4px;
            font-weight: 500;
        }

        .status-Processing { background: #fff3cd; color: #856404; }
        .status-Shipped { background: #cce5ff; color: #004085; }
        .status-Delivered { background: #d4edda; color: #155724; }
        .status-Cancelled { background: #f8d7da; color: #721c24; }

        /* Product grid */
        .order-info-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .info-section {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 4px;
        }

        /* Product list */
        .product-list {
            margin-top: 20px;
        }

        .product-item {
            display: grid;
            grid-template-columns: auto 1fr auto;
            gap: 20px;
            padding: 15px;
            border: 1px solid #eee;
            border-radius: 4px;
            margin-bottom: 10px;
        }

        .product-image {
            width: 100px;
            height: 100px;
            object-fit: cover;
            border-radius: 4px;
        }

        /* Price details */
        .price-details {
            text-align: right;
            display: flex;
            flex-direction: column;
            justify-content: center;
        }

        .original-price {
            text-decoration: line-through;
            color: #666;
        }

        .discounted-price {
            font-weight: bold;
            font-size: 1.1rem;
        }

        /* Invoice section */
        .invoice-section {
            margin: 15px 0;
            padding: 15px;
            border-radius: 8px;
            background: #f8f9fa;
            border: 1px solid #e9ecef;
        }

        .invoice-button {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            padding: 8px 16px;
            border-radius: 6px;
            font-weight: 500;
            transition: all 0.2s;
            border: none;
            cursor: pointer;
            background: #4F46E5;
            color: white;
        }

        .invoice-button:hover:not(.disabled) {
            background: #4338CA;
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .invoice-button.disabled {
            background: #E5E7EB;
            color: #9CA3AF;
            cursor: not-allowed;
        }

        /* Pagination */
        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            margin-top: 20px;
            gap: 15px;
        }

        .pagination a {
            text-decoration: none;
            padding: 8px 16px;
            border: 1px solid #ddd;
            border-radius: 4px;
            color: #007bff;
        }

        .pagination a:hover {
            background-color: #f1f1f1;
        }

        /* Responsive adjustments */
        @media (max-width: 768px) {
            .product-item {
                grid-template-columns: 1fr;
                text-align: center;
            }

            .product-image {
                margin: 0 auto;
            }

            .price-details {
                text-align: center;
            }

            .order-header {
                flex-direction: column;
                gap: 10px;
                text-align: center;
            }
        }
    </style>
</head>
<body>
    <!-- Include Header -->
    <%- include('../partials/user/header.ejs') %>

    <div class="container-fluid">
        <div class="row">
            <!-- Include Sidebar -->
            <%- include('../partials/user/userSidebar.ejs') %>

            <!-- Main Content -->
            <div class="col-lg-9 main-content">
                <% if (!orders || orders.length === 0) { %>
                    <!-- Empty State -->
                    <div class="order-card text-center py-5">
                        <i class="fas fa-shopping-bag fa-3x mb-3" style="color: #ccc;"></i>
                        <h2>No Orders Found</h2>
                        <p class="text-muted">You haven't placed any orders yet.</p>
                        <a href="/user/shop" class="btn btn-primary mt-3">
                            Start Shopping
                        </a>
                    </div>
                <% } else { %>
                    <!-- Orders List -->
                    <% orders.forEach(order => { %>
                        <div class="order-card">
                            <!-- Order Header -->
                            <div class="order-header">
                                <div class="order-number">Order #<%= order.orderNumber %></div>
                                <div class="order-status status-<%= order.orderStatus %>">
                                    <%= order.orderStatus %>
                                </div>
                            </div>

                            <!-- Cancel Order Section -->
                            <% if ((order.orderStatus !== 'Cancelled' && order.orderStatus !== 'Delivered' && order.orderStatus !== 'Returned') && order.payment.status === "Completed") { %>
                              <div class="d-flex justify-content-end mb-3">
                                  <button class="btn btn-danger" onclick="cancelAllOrders('<%=order._id%>')">
                                      Cancel Order
                                  </button>
                              </div>
                          <% } %>
                            <!-- Invoice Section -->
                            <div class="invoice-section">
                                <% if ((order.payment.method === "Razorpay" && order.payment.status === "Completed") || 
                                    (order.payment.method === 'COD' && order.orderStatus === 'Delivered') || 
                                    (order.payment.method === "Wallet" && order.payment.status === "Completed")) { %>
                                    <div class="d-flex align-items-center justify-content-between">
                                        <div>
                                            <h4 class="mb-1">Invoice</h4>
                                            <span class="badge bg-success">
                                                <i class="fas fa-check-circle me-1"></i>
                                                Available for download
                                            </span>
                                        </div>
                                        <button onclick="downloadInvoice('<%= order._id %>')" class="invoice-button">
                                            <i class="fas fa-file-download"></i>
                                            Download Invoice
                                        </button>
                                    </div>
                                <% } else { %>
                                    <div class="d-flex align-items-center justify-content-between">
                                        <div>
                                            <h4 class="mb-1">Invoice</h4>
                                            <span class="badge bg-secondary">
                                                <i class="fas fa-clock me-1"></i>
                                                <%= order.payment.method === 'Razorpay' && order.payment.status !== 'Completed' ? 
                                                    'Waiting for payment confirmation' : 
                                                    order.payment.method === 'COD' && order.orderStatus !== 'Delivered' ?
                                                    'Available after delivery' :
                                                    order.orderStatus === 'Returned' ?
                                                    'Cannot download invoice for returned order' :
                                                    'Waiting for confirmation' %>
                                            </span>
                                        </div>
                                        <button class="invoice-button disabled" disabled>
                                            <i class="fas fa-file-download"></i>
                                            Download Invoice
                                        </button>
                                    </div>
                                <% } %>
                            </div>

                            <!-- Payment Status Section -->
                            <% if (order.orderStatus !== 'Cancelled' && order.payment.status === 'Failed') { %>
                                <div class="alert alert-danger mb-3">
                                    <p class="mb-2">Payment Failed</p>
                                    <button class="btn btn-success" 
                                            onclick="retryPayment('<%= order._id %>', <%= order.pricing.finalAmount %>)">
                                        Retry Payment
                                    </button>
                                </div>
                            <% } %>

                            <!-- Order Information -->
                            <div class="order-info-grid">
                                <div class="info-section">
                                    <h3>Order Information</h3>
                                    <p><strong>Order Date:</strong> <%= new Date(order.createdAt).toLocaleDateString() %></p>
                                    <% if (order.expectedDeliveryDate) { %>
                                        <p><strong>Expected Delivery:</strong> <%= new Date(order.expectedDeliveryDate).toLocaleDateString() %></p>
                                    <% } %>
                                    <p><strong>Payment Method:</strong> <%= order.payment.method %></p>
                                    <p><strong>Payment Status:</strong> <%= order.payment.status %></p>
                                </div>

                                <div class="info-section">
                                    <h3>Shipping Address</h3>
                                    <p><%= order.shippingAddress.name %></p>
                                    <p><%= order.shippingAddress.landMark %></p>
                                    <p><%= order.shippingAddress.city %>, <%= order.shippingAddress.state %></p>
                                    <p><%= order.shippingAddress.country %> - <%= order.shippingAddress.pincode %></p>
                                    <p>Phone: <%= order.shippingAddress.phone %></p>
                                </div>
                            </div>

                            <!-- Product List -->
                            <div class="product-list">
                                <h3>Ordered Items</h3>
                                <% order.orderItems.forEach(item => { %>
                                    <div class="product-item">
                                        <img src="<%= item.variant.productImage %>" alt="Product" class="product-image">
                                        
                                        <div class="product-details">
                                            <h4><%= item.product.productName %></h4>
                                            <p>Color: <%= item.variant.colorName %></p>
                                            <p>Size: <%= item.variant.size %></p>
                                            <p>Quantity: <%= item.quantity %></p>

                                            <!-- Item Status -->
                                            <% if (item.status.itemStatus === "Cancelled") { %>
                                                <p class="text-danger fw-bold">Cancelled</p>
                                            <% } else if (item.status.return && item.status.return.requested) { %>
                                                <p>Return status: <%= item.status.return.status %></p>
                                            <% } else if (order.orderStatus !== 'Cancelled' && order.orderStatus !== 'Delivered') { %>
                                                <button class="btn btn-sm btn-danger mt-2"
                                                        onclick="confirmCancelItem('<%= order._id %>', '<%= item._id %>')">
                                                    Cancel This Item
                                                </button>
                                            <% } %>

                                            <!-- Return Option -->
                                            <% if (order.orderStatus === 'Delivered' && item.status.itemStatus !== 'Cancelled') { %>
                                                <% if (item.status.return && item.status.return.requested) { %>
                                                    <p class="text-primary fw-bold mt-2">
                                                        Return status: <%= item.status.return.status %>
                                                    </p>
                                                <% } else { %>
                                                    <button class="btn btn-sm btn-success mt-2"
                                                            onclick="initiateReturn('<%= order._id %>', '<%= item._id %>')">
                                                        Return Item
                                                    </button>
                                                <% } %>
                                            <% } %>
                                        </div>
    
                      <!-- Price Details -->
                      <div class="price-details">
                        <% if (item.price.originalPrice !== item.price.discountedPrice) { %>
                          <div class="price-row">
                            <span class="price-label">Original Price:</span>
                            <span class="original-price">₹<%= item.price.originalPrice.toFixed(2) %></span>
                          </div>
                        <% } %>
    
                        <% if (item.price.productOffer > 0) { %>
                          <div class="price-row">
                            <span class="product-offer"><%= item.price.offerType %>: <%= item.price.productOffer %>% off</span>
                          </div>
                        <% } %>
    
                        <div class="price-row">
                          <span class="price-label">Price after discount:</span>
                          <span class="discounted-price">₹<%= item.price.discountedPrice.toFixed(2) %></span>
                        </div>
    
                        <div class="price-row" style="border-top: 1px solid #ddd; padding-top: 5px; margin-top: 5px;">
                          <span class="quantity-total">
                            <span class="price-label">Total:</span>
                            <%= item.quantity %> × ₹<%= item.price.discountedPrice.toFixed(2) %> = 
                            ₹<%= (item.price.discountedPrice * item.quantity).toFixed(2) %>
                          </span>
                        </div>
                      </div>
                    </div>
                  <% }); %>
                </div>
    
                <!-- Order Summary -->
                <div class="order-summary">
                  <h3>Order Summary</h3>
                  
                  <div class="summary-row">
                    <strong>Items Total (Original):</strong>
                    <span>₹<%= order.orderItems.reduce((total, item) => 
                      total + (item.price.originalPrice * item.quantity), 0).toFixed(2) %></span>
                  </div>
    
                  <% if (order.pricing.productOffersTotal > 0) { %>
                    <div class="summary-row discount">
                      <strong>Product/Category Offers:</strong>
                      <span>-₹<%= order.pricing.productOffersTotal.toFixed(2) %></span>
                    </div>
                  <% } %>
    
                  <div class="summary-row">
                    <strong>Subtotal (after offers):</strong>
                    <span>₹<%= order.pricing.subtotal.toFixed(2) %></span>
                  </div>
    
                  <% if (order.pricing.coupon && order.pricing.coupon.discount > 0) { %>
                    <div class="summary-row discount">
                      <strong>Coupon Discount (<%= order.pricing.coupon.code %>):</strong>
                      <span>-₹<%= order.pricing.coupon.discount.toFixed(2) %></span>
                    </div>
                  <% } %>
    
                  <div class="total-amount">
                    <strong>Final Amount:</strong>
                    <span>₹<%= order.pricing.finalAmount.toFixed(2) %></span>
                  </div>
                </div>
              </div>
            <% }); %>
          <% } %>
        </div>
    
        <!-- Pagination -->
        <div class="pagination">
          <% if (hasPrevPage) { %>
            <a href="?page=<%= currentPage - 1 %>" class="prev-page">Previous</a>
          <% } %>
          <span>Page <%= currentPage %> of <%= totalPages %></span>
          <% if (hasNextPage) { %>
            <a href="?page=<%= currentPage + 1 %>" class="next-page">Next</a>
          <% } %>
        </div>
      </div>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
      </body>
    </html>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
      // function for cancelling orders one by one
      function confirmCancelItem(orderId, itemId) {
  Swal.fire({
    title: "Cancel this item",
    html: `
      <div class="mb-4">
        <select id="cancelReason" class="swal2-select w-full mb-3">
          <option value="">Select a reason</option>
          <option value="Changed my mind">Changed my mind</option>
          <option value="Found better price">Found better price elsewhere</option>
          <option value="Shipping time too long">Shipping time too long</option>
          <option value="Ordered by mistake">Ordered by mistake</option>
          <option value="Payment issues">Payment issues</option>
          <option value="Other">Other reason</option>
        </select>
        <textarea id="additionalDetails" 
          class="swal2-textarea" 
          placeholder="Additional details (optional)"
          style="display: none;"
        ></textarea>
      </div>
    `,
    showCancelButton: true,
    confirmButtonColor: "#3085d6",
    cancelButtonColor: "#d33",
    confirmButtonText: "Yes, cancel it!",
    didOpen: () => {
      const reasonSelect = document.getElementById('cancelReason');
      const additionalDetails = document.getElementById('additionalDetails');
      
      reasonSelect.addEventListener('change', (e) => {
        if (e.target.value === 'Other') {
          additionalDetails.style.display = 'block';
        } else {
          additionalDetails.style.display = 'none';
        }
      });
    },
    preConfirm: () => {
      const reason = document.getElementById('cancelReason').value;
      const message = document.getElementById('additionalDetails').value;
      
      if (!reason) {
        Swal.showValidationMessage('Please select a reason');
        return false;
      }
      
      return {
        reason,
        message: reason === 'Other' ? message : ''
      };
    }
  }).then((result) => {
    if (result.isConfirmed) {
      cancelOrder(orderId, itemId, result.value);
    }
  });
}

      // for cancelling orders one by one
      async function cancelOrder(orderId, itemId,  { reason, message }) {
        try {
          const response = await fetch(
            `/user/cancel-order-item/${orderId}/${itemId}`,
            {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({reason,message}),
            }
          );

          const data = await response.json();

          if (data.success) {
            Swal.fire({
              icon: "success",
              title: "Cancelled",
              text: "order cancelled successfully",
              showConfirmButton: false,
              timer: 1500,
            }).then(() => {
              window.location.reload();
            });
          } else {
            Swal.fire({
              icon: "error",
              title: "failed to cancel",
              text: data.message,
            });
          }
        } catch (error) {
          Swal.fire("Error!", error.message);
        }
      }

      function cancelAllOrders(orderId) {
  Swal.fire({
    title: "Cancel this order",
    html: `
      <div class="mb-4">
        <select id="cancelReason" class="swal2-select w-full mb-3">
          <option value="">Select a reason</option>
          <option value="Changed my mind">Changed my mind</option>
          <option value="Found better price">Found better price elsewhere</option>
          <option value="Shipping time too long">Shipping time too long</option>
          <option value="Ordered by mistake">Ordered by mistake</option>
          <option value="Payment issues">Payment issues</option>
          <option value="Other">Other reason</option>
        </select>
        <textarea id="additionalDetails" 
          class="swal2-textarea" 
          placeholder="Additional details (optional)"
          style="display: none;"
        ></textarea>
      </div>
    `,
    showCancelButton: true,
    confirmButtonColor: "#3085d6",
    cancelButtonColor: "#d33",
    confirmButtonText: "Yes, cancel it!",
    didOpen: () => {
      const reasonSelect = document.getElementById('cancelReason');
      const additionalDetails = document.getElementById('additionalDetails');
      
      reasonSelect.addEventListener('change', (e) => {
        if (e.target.value === 'Other') {
          additionalDetails.style.display = 'block';
        } else {
          additionalDetails.style.display = 'none';
        }
      });
    },
    preConfirm: () => {
      const reason = document.getElementById('cancelReason').value;
      const message = document.getElementById('additionalDetails').value;
      
      if (!reason) {
        Swal.showValidationMessage('Please select a reason');
        return false;
      }
      
      return {
        reason,
        message: reason === 'Other' ? message : ''
      };
    }
  }).then((result) => {
    if (result.isConfirmed) {
      cancelAll(orderId, result.value);
    }
  });
}


      async function cancelAll(orderId,  { reason, message }) {
        try {
          const response = await fetch(`/user/cancel-all/${orderId}`, {
            method: "post",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({reason,message}),
          });

          const result = await response.json();

          if (result.success) {
            Swal.fire({
              icon: "success",
              title: result.message,
              timer: 1500,
            }).then(() => {
              window.location.reload();
            });
          } else {
            Swal.fire({
              icon: "error",
              title: result.message,
            });
          }
        } catch (error) {
          console.log("error in cancel all orders fetch", error.message);
        }
      } 

      // ====function to return the order=========

      function initiateReturn(orderId, itemId) {
        Swal.fire({
          title: "Return Item",
          text: "Select a reason for return",
          input: "select",
          inputOptions: {
            defective: "Defective Product",
            wrong: "Wrong Product",
            damaged: "Product Damaged",
            size: "Size/Fit Issue",
            other: "Other Reasons",
          },
          inputPlaceholder: "Select a reason",
          showCancelButton: true,
          confirmButtonText: "Proceed Return",
          inputValidator: (value) => {
            if (!value) {
              return "You need to select a reason";
            }
          },
        }).then((result) => {
          if (result.isConfirmed) {
            processReturn(orderId, itemId, result.value);
          }
        });
      }

      async function processReturn(orderId, itemId, reason) {
        try {
          const response = await fetch(
            `/admin/return-order-item/${orderId}/${itemId}`,
            {
              method: "post",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ reason }),
            }
          );
          const data = await response.json();

          if (data.success) {
            swal
              .fire({
                icon: "success",
                title: "Return Initiated",
                text: "your request has been submitted",
                showConfirmButton: false,
                timer: 1500,
              })
              .then(() => {
                window.location.reload();
              });
          } else {
            Swal.fire({
              icon: "error",
              title: "return failed",
              text: data.message,
            });
          }
        } catch (error) {
          console.log("error in return fetch", error.message);
        }
      }



        // for return payment

        async function retryPayment(orderId, amount) {
      try {
          const response = await fetch(`/user/retry-payment/${orderId}`, {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json'
              }
          });

          const data = await response.json();

          if (!data.success) {
              throw new Error(data.message);
          }

          const options = {
              key: data.razorpayKeyId,
              amount: data.amount,
              currency: "INR",
              name: "BLUR VINTAGE ⭐",
              description: `Payment retry for order ${data.orderNumber}`,
              order_id: data.razorpayOrderId,
              handler: async function (response) {
                  try {
                      const verificationResponse = await fetch('/user/retry-payment-verification', {
                          method: 'POST',
                          headers: {
                              'Content-Type': 'application/json'
                          },
                          body: JSON.stringify({
                              razorpay_order_id: response.razorpay_order_id,
                              razorpay_payment_id: response.razorpay_payment_id,
                              razorpay_signature: response.razorpay_signature
                          })
                      });

                      const verificationData = await verificationResponse.json();

                      if (verificationData.success) {
                          Swal.fire({
                              icon: 'success',
                              title: 'Payment Successful',
                              text: 'Your payment has been processed successfully',
                              showConfirmButton: false,
                              timer: 1500
                          }).then(() => {
                              window.location.reload();
                          });
                      } else {
                          throw new Error(verificationData.message);
                      }
                  } catch (error) {
                      Swal.fire({
                          icon: 'error',
                          title: 'Payment Verification Failed',
                          text: error.message
                      });
                  }
              },
              prefill: {
                  name: data.customerName,
                  email: data.customerEmail,
                  contact: data.customerPhone
              },
              theme: {
                  color: "#3399cc"
              }
          };

          const rzp = new Razorpay(options);
          rzp.open();

          rzp.on('payment.failed', function (response) {
              Swal.fire({
                  icon: 'error',
                  title: 'Payment Failed',
                  text: response.error.description
              });
          });

      } catch (error) {
          Swal.fire({
              icon: 'error',
              title: 'Error',
              text: error.message || 'Failed to initiate payment'
          });
      }
  }




  function downloadInvoice(orderId) {
    Swal.fire({
        title: 'Preparing Invoice',
        html: '<div class="flex flex-col items-center"><i class="fas fa-file-invoice fa-3x mb-4 text-blue-500"></i><p>Generating your invoice...</p></div>',
        allowOutsideClick: false,
        showConfirmButton: false,
        didOpen: () => {
            Swal.showLoading();
        },
        customClass: {
            popup: 'animated bounceIn'
        }
    });
    const iframe = document.createElement('iframe');
    iframe.style.display = 'none';
    iframe.src = `/user/download-invoice/${orderId}`;
    document.body.appendChild(iframe);

   
    iframe.onload = function() {
        document.body.removeChild(iframe);
        Swal.fire({
            icon: 'success',
            title: 'Download Complete!',
            html: '<div class="flex flex-col items-center"><i class="fas fa-check-circle fa-3x mb-4 text-green-500"></i><p>Your invoice has been downloaded successfully</p></div>',
            timer: 2500,
            position: 'center-end',
            width: '24em',
            timerProgressBar: true,
            showConfirmButton: false,
            customClass: {
                popup: 'animated fadeInUp'
            }
        });
    };

    iframe.onerror = function() {
        document.body.removeChild(iframe);
        Swal.fire({
            icon: 'error',
            title: 'Download Failed',
            text: 'Failed to download invoice. Please try again.'
        });
    };
  }

    </script>
