<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add Product - BLUR VINTAGE â˜…</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.2/font/bootstrap-icons.css">
    <link rel="stylesheet" href="/styles/addproductpage.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet">

    <style>
        /* Image upload zone styling */
.variant-image-upload {
    border: 2px dashed #ccc;
    border-radius: 4px;
    padding: 20px;
    text-align: center;
    background-color: #f8f9fa;
    cursor: pointer;
    transition: all 0.3s ease;
    min-height: 150px;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 15px;
}

.variant-image-upload:hover {
    border-color: #0d6efd;
    background-color: #f1f8ff;
}

.variant-image-upload.border-primary {
    border-color: #0d6efd;
    background-color: #f1f8ff;
}

/* Preview container styling */
.variant-image-preview-container {
    margin-top: 10px;
}

.variant-image-container {
    position: relative;
    display: inline-block;
    margin: 5px;
}

.variant-image-preview {
    max-width: 200px;
    max-height: 200px;
    border-radius: 4px;
    border: 1px solid #ddd;
}

.remove-variant-image {
    position: absolute;
    top: -10px;
    right: -10px;
    background-color: #dc3545;
    color: white;
    border: none;
    border-radius: 50%;
    width: 24px;
    height: 24px;
    line-height: 24px;
    text-align: center;
    cursor: pointer;
    padding: 0;
}

/* Cropper container styling */
#cropperContainer {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.8);
            z-index: 1000;
            display: none;
            justify-content: center;
            align-items: center;
            padding: 20px;
 }
 .size-checkbox-group {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-top: 5px;
        }
        
        .size-checkbox-label {
            display: flex;
            align-items: center;
            gap: 5px;
            padding: 5px 10px;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            cursor: pointer;
        }

        .size-checkbox-label:hover {
            background-color: #f8f9fa;
        }

        .size-checkbox-label input:checked + span {
            font-weight: bold;
        }

        .size-stock-inputs {
            margin-top: 10px;
            display: none;
        }

        .size-stock-inputs.active {
            display: block;
        }

 /* #cropperContainer .cropper-container {
            max-width: 90vw;
            max-height: 80vh;
 } */

.cropper-content {
    background: white;
    padding: 20px;
    border-radius: 8px;
    max-width: 90%;
    max-height: 90vh;
    overflow: auto;
}
    </style>
</head>
<body>
    <div class="d-flex flex-column flex-lg-row">
        <!-- Sidebar -->
        <%-include('../partials/admin/sidebar.ejs')%>

        <section class="content-main">
            <div class="row">
                <div class="col-9">
                    <div class="content-header" style="text-align: center;">
                        <h2 class="content-title"  style="margin-top: 50px ;">Add Product</h2>
                    </div>
                </div>
                       <div class="col-lg-10">
                          <div class="card mb-4" style="margin-left: 200px; margin-top: 100px;">
                           <div class="card-body">
                            <form id="addProductForm" method="post" action="/admin/addproduct" enctype="multipart/form-data">
                                <div class="mb-4">
                                    <label for="product_name" class="form-label">Product Name</label>
                                    <input type="text" placeholder="Type here" name="productName" class="form-control" id="product_name">
                                    <div id="productName-error" class="error-message"></div>
                                </div>
                               
                                <div class="mb-4">
                                    <label class="form-label">Full description</label>
                                    <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control" rows="4" itemid="description"></textarea>
                                    <div id="description-error" class="error-message"></div>
                                </div>
                                     <!-- New Variants Section -->
                            <div class="mb-4">
                          <label class="form-label">Product Variants</label>
                           <div id="variantsContainer">
                            <div class="variant-item mb-3 p-3 border rounded">
                                <div class="row">
                                    <div class="col-md-2">
                                        <label class="form-label">Size</label>
                                        <select name="variants[0][size]" class="form-control">
                                            <option value="">Select Size</option>
                                            <option value="XS">XS</option>
                                            <option value="S">S</option>
                                            <option value="M">M</option>
                                            <option value="L">L</option>
                                            <option value="XL">XL</option>
                                            <option value="XXL">XXL</option>
                                        </select>
                                    </div>
                                    <div class="col-md-2">
                                        <label class="form-label">Color</label>
                                        <input type="color" name="variants[0][color]" class="form-control">
                                    </div>
                                    <div class="col-md-2">
                                        <label class="form-label">Color Name</label>
                                        <input type="text" name="variants[0][colorName]" class="form-control">
                                    </div>
                                    <div class="col-md-2">
                                        <label class="form-label">Price</label>
                                        <input type="number" step="0.01" name="variants[0][price]" class="form-control" id="variantPrice">
                                        <span id="variantPriceError" class="text-danger"></span>
                                    </div>
                                    <div class="col-md-2">
                                        <label class="form-label">Stock</label>
                                        <input type="number" name="variants[0][stock]" class="form-control">
                                    </div>
                                    <div class="col-md-2 d-flex align-items-end">
                                        <button type="button" class="btn btn-danger remove-variant" style="display: none;">Remove</button>
                                    </div>
                                    <!-- Add image upload section -->
                                    <div class="col-12 mt-2">
                                        <div class="variant-image-upload" data-variant-index="0">
                                            <p>Drag & drop image here or click to select</p>
                                            <input type="file" class="variant-file-input" accept="image/*" style="display: none;" name="image">
                                        </div>
                                        <div class="variant-image-preview-container"></div>
                                    </div>
                                </div>
                            </div>
                            </div>
                            <button type="button" id="addVariant" class="btn btn-secondary mt-2">Add Variant</button>
                            <div id="variants-error" class="error-message"></div>
                            </div>
                                <div class="mb-4">
                                    <label class="form-label">Category</label>
                                    <select class="form-select" name="category">
                                        <option value="">Choose a category</option>
                                        <%locals.cat.forEach(element =>{%>
                                            <option value="<%= element.name %>"><%= element.name %></option>
                                        <%})%>
                                    </select>
                                    <div id="category-error" class="error-message"></div>
                                </div>
                                <!-- <div class="mb-4">
                                    <label class="form-label">Product Images</label>
                                    <div class="image-upload-container" id="dropZone">
                                        <p>Drag & drop images here or click to select</p>
                                        <input type="file" id="fileInput" name="images" multiple accept="image/*" style="display: none;">
                                    </div>
                                    <div class="image-preview-container" id="imagePreviewContainer"></div>
                                    <div id="images-error" class="error-message"></div>
                                </div> -->
                                <div>
                                    <button class="btn btn-primary" type="submit">Publish</button>
                                </div>
                            </form>
                        </div>
                      </div>
                     </div>
                   </div>
        </section>
        
        <div id="cropperContainer">
            <div id="cropperWrapper">
                <img id="cropperImage">
                <div id="cropperControls">
                    <button id="cropButton" class="btn btn-primary">Crop & Save</button>
                    <button id="cancelCropButton" class="btn btn-secondary">Cancel</button>
                </div>
            </div>
        </div>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
        <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
        <script>
        document.addEventListener('DOMContentLoaded', function() {
    const variantsContainer = document.getElementById('variantsContainer');
    const addVariantButton = document.getElementById('addVariant');
    const cropperContainer = document.getElementById('cropperContainer');
    const cropperImage = document.getElementById('cropperImage');
    const cropButton = document.getElementById('cropButton');
    const cancelCropButton = document.getElementById('cancelCropButton');
    let variantCount = 1;
    let cropper;
    let currentVariantIndex;
    let currentFileInput;
    const variantImages = new Map(); // Map to store arrays of images for each variant

    function initializeImageUpload(variantIndex) {
        const uploadZone = document.querySelector(`[data-variant-index="${variantIndex}"]`);
        if (!uploadZone) return;
        
        const fileInput = uploadZone.querySelector('.variant-file-input');
        const previewContainer = uploadZone.parentElement.querySelector('.variant-image-preview-container');

        // Initialize the variant's image array if it doesn't exist
        if (!variantImages.has(variantIndex)) {
            variantImages.set(variantIndex, []);
        }

        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            uploadZone.addEventListener(eventName, preventDefaults);
        });

        ['dragenter', 'dragover'].forEach(eventName => {
            uploadZone.addEventListener(eventName, () => {
                uploadZone.classList.add('border-primary');
            });
        });

        ['dragleave', 'drop'].forEach(eventName => {
            uploadZone.addEventListener(eventName, () => {
                uploadZone.classList.remove('border-primary');
            });
        });

        uploadZone.addEventListener('drop', (e) => {
            const dt = e.dataTransfer;
            const files = Array.from(dt.files);
            files.forEach(file => {
                if (file.type.startsWith('image/')) {
                    handleVariantFile(file, variantIndex, fileInput);
                }
            });
        });

        uploadZone.addEventListener('click', () => {
            fileInput.click();
        });

        fileInput.addEventListener('change', (e) => {
            const files = Array.from(e.target.files);
            files.forEach(file => {
                if (file.type.startsWith('image/')) {
                    handleVariantFile(file, variantIndex, fileInput);
                }
            });
        });
    }

    function handleVariantFile(file, variantIndex, fileInput) {
        if (!file || !file.type.startsWith('image/')) {
            Swal.fire({
                icon: 'error',
                title: 'Invalid file type',
                text: 'Please upload an image file'
            });
            return;
        }

        const reader = new FileReader();
        reader.onload = (e) => {
            currentFileInput = fileInput;
            showVariantCropper(e.target.result, variantIndex);
        };
        reader.readAsDataURL(file);
    }

    function showVariantCropper(imageSrc, variantIndex) {
      
      
        
        if (cropper) {
            cropper.destroy();
            cropper = null;
        }
        cropperContainer.style.display = 'flex';
        cropperImage.style.display = 'block';
        cropperImage.style.maxWidth = '100%';
        cropperImage.style.maxHeight = '80vh'


          cropperImage.src = imageSrc;
        currentVariantIndex = variantIndex;
        cropperImage.onload = function() {
            cropper = new Cropper(cropperImage, {
                aspectRatio: 1,
                viewMode: 1,
                minCropBoxWidth: 400,
                minCropBoxHeight: 900,
                background: true,
                movable: true,
                zoomable: true,
                  ready() {
                    // Set initial crop box size
                    const containerData = cropper.getContainerData();
                    const size = Math.min(containerData.width, containerData.height, 300);
                    cropper.setCropBoxData({
                        width: size,
                        height: size,
                        left: (containerData.width - size) / 2,
                        top: (containerData.height - size) / 2
                    });
                }
            });
        };
    }

    function closeCropper() {
        cropperContainer.style.display = 'none';
        if (cropper) {
            cropper.destroy();
            cropper = null;
        }
        cropperContainer.style.display = "none";
        cropperImage.style.display = "none";
        if (currentFileInput) {
            currentFileInput.value = ''; // Reset file input
        }
    }

    function updateVariantImagePreview(variantIndex) {
        const variantItem = document.querySelector(`[data-variant-index="${variantIndex}"]`).parentElement;
        const previewContainer = variantItem.querySelector('.variant-image-preview-container');
        const images = variantImages.get(variantIndex) || [];

        previewContainer.innerHTML = images.map((imageSrc, imageIndex) => `
            <div class="variant-image-container">
                <img src="${imageSrc}" class="variant-image-preview">
                <button type="button" class="remove-variant-image" data-image-index="${imageIndex}">&times;</button>
            </div>
        `).join('');

        // Add event listeners for remove buttons
        previewContainer.querySelectorAll('.remove-variant-image').forEach(button => {
            button.addEventListener('click', () => {
                const imageIndex = parseInt(button.getAttribute('data-image-index'));
                const images = variantImages.get(variantIndex);
                images.splice(imageIndex, 1);
                updateVariantImagePreview(variantIndex);
            });
        });
    }

    // Initialize the first variant's image upload
    initializeImageUpload(0);

    // Add variant button click handler
    addVariantButton.addEventListener('click', function() {
        const variantTemplate = `
            <div class="variant-item mb-3 p-3 border rounded">
                <div class="row">
                    <div class="col-md-2">
                        <label class="form-label">Size</label>
                        <select name="variants[${variantCount}][size]" class="form-control">
                            <option value="">Select Size</option>
                            <option value="XS">XS</option>
                            <option value="S">S</option>
                            <option value="M">M</option>
                            <option value="L">L</option>
                            <option value="XL">XL</option>
                            <option value="XXL">XXL</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">Color</label>
                        <input type="color" name="variants[${variantCount}][color]" class="form-control">
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">Color Name</label>
                        <input type="text" name="variants[${variantCount}][colorName]" class="form-control">
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">Price</label>
                        <input type="number" step="0.01" name="variants[${variantCount}][price]" class="form-control">
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">Stock</label>
                        <input type="number" name="variants[${variantCount}][stock]" class="form-control">
                    </div>
                    <div class="col-md-2 d-flex align-items-end">
                        <button type="button" class="btn btn-danger remove-variant">Remove</button>
                    </div>
                    <div class="col-12 mt-3">
                        <div class="variant-image-upload" data-variant-index="${variantCount}">
                            <p>Drag & drop images here or click to select</p>
                            <input type="file" class="variant-file-input" accept="image/*" multiple style="display: none;">
                        </div>
                        <div class="variant-image-preview-container"></div>
                    </div>
                </div>
            </div>
        `;
        variantsContainer.insertAdjacentHTML('beforeend', variantTemplate);
        initializeImageUpload(variantCount);
        variantCount++;
        updateRemoveButtons();
    });

    function updateRemoveButtons() {
        const removeButtons = document.querySelectorAll('.remove-variant');
        removeButtons.forEach((button, index) => {
            if (index === 0 && removeButtons.length === 1) {
                button.style.display = 'none';
            } else {
                button.style.display = 'block';
            }
        });
    }

    // Event delegation for remove variant buttons
    variantsContainer.addEventListener('click', function(e) {
        if (e.target.classList.contains('remove-variant')) {
            const variantItem = e.target.closest('.variant-item');
            const variantIndex = variantItem.querySelector('.variant-image-upload').getAttribute('data-variant-index');
            variantImages.delete(parseInt(variantIndex));
            variantItem.remove();
            updateRemoveButtons();
        }
    });

    // Cropper button handlers
    cropButton.addEventListener('click', () => {
        if (!cropper) return;
        const croppedImageData = cropper.getCroppedCanvas().toDataURL();
        const images = variantImages.get(currentVariantIndex) || [];
        images.push(croppedImageData);
        variantImages.set(currentVariantIndex, images);
        updateVariantImagePreview(currentVariantIndex);
        closeCropper();
    });

    cancelCropButton.addEventListener('click', closeCropper);

    // Form submission handler
    const addProductForm = document.getElementById("addProductForm");
    addProductForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        if (!validateForm()) return;

        const formData = new FormData();
        formData.append("productName", document.getElementById("product_name").value);
        formData.append("description", document.getElementById("descriptionid").value);
        formData.append("category", document.querySelector('select[name="category"]').value);

        const variants = [];
        document.querySelectorAll(".variant-item").forEach((item, index) => {
            const variant = {
                size: item.querySelector('select[name^="variants"][name$="[size]"]').value,
                color: item.querySelector('input[name^="variants"][name$="[color]"]').value,
                colorName: item.querySelector('input[name^="variants"][name$="[colorName]"]').value,
                price: item.querySelector('input[name^="variants"][name$="[price]"]').value,
                stock: item.querySelector('input[name^="variants"][name$="[stock]"]').value
            };
            variants.push(variant);
        });

        formData.append("variants", JSON.stringify(variants));

        // Handle image uploads
        const uploadPromises = [];
        variantImages.forEach((images, variantIndex) => {
    images.forEach((imageData, imageIndex) => {
        const promise = fetch(imageData)
            .then(res => res.blob())
            .then(blob => {
                // Match the field name exactly with what multer expects
                const fieldName = `productImages[${variantIndex}][${imageIndex}]`;
                formData.append(fieldName, blob, `variant-${variantIndex}-${imageIndex}.png`);
            });
        uploadPromises.push(promise);
    });
});
        try {
            await Promise.all(uploadPromises);
            
            const response = await fetch('/admin/addproduct', {
                method: 'POST',
                body: formData
            });

            if (response.ok) {
                Swal.fire({
                    icon: "success",
                    title: "Product added successfully",
                    timer: 1000
                }).then(() => {
                    window.location.href = '/admin/productpage';
                });
            } else {
                Swal.fire({
                    icon: "error",
                    title: "The product already exists",
                });
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                icon: "error",
                title: "An error occurred",
            });
        }
    });

    function validateForm() {
        let isValid = true;
        const errorElements = document.querySelectorAll('.error-message');
        errorElements.forEach(el => el.textContent = '');

        // Product name validation
        const productName = document.getElementById('product_name').value.trim();
        if (!productName) {
            document.getElementById('productName-error').textContent = 'Product name is required.';
            isValid = false;
        }

        // Description validation
        const description = document.getElementById('descriptionid').value.trim();
        if (!description) {
            document.getElementById('description-error').textContent = 'Description is required.';
            isValid = false;
        }

        // Category validation
        const category = document.querySelector('select[name="category"]').value;
        if (!category) {
            document.getElementById('category-error').textContent = 'Please select a category.';
            isValid = false;
        }

        // Variant validation
        const variants = document.querySelectorAll('.variant-item');
        let hasValidVariant = false;

        variants.forEach((variant, index) => {
    const size = variant.querySelector('select[name^="variants"][name$="[size]"]').value;
    const color = variant.querySelector('input[name^="variants"][name$="[color]"]').value;
    const colorName = variant.querySelector('input[name^="variants"][name$="[colorName]"]').value;
    const price = variant.querySelector('input[name^="variants"][name$="[price]"]').value;
    const stock = variant.querySelector('input[name^="variants"][name$="[stock]"]').value;
    
   
    const variantImageArray = variantImages.get(index) || [];
    if (variantImageArray.length === 0) {
        document.getElementById('variants-error').textContent = 'Each variant must have at least one image.';
        isValid = false;
    }

    if (price <= 0) {
        variant.querySelector('.variant-price-error').textContent = "Price should be greater than zero";
        isValid = false;
    }

    if (size && color && colorName && price && stock) {
        hasValidVariant = true;
    }
});

        if (!hasValidVariant) {
            document.getElementById('variants-error').textContent = 'At least one complete variant is required.';
            isValid = false;
        }

        return isValid;
    }

    // Handle window resize for cropper
    window.addEventListener('resize', function() {
        if (cropper) {
            const containerData = cropper.getContainerData();
            cropper.setCropBoxData({
                width: Math.min(containerData.width, 300),
                height: Math.min(containerData.height, 300),
            });
        }
    });
});

</script>
        
</body>
</html>
