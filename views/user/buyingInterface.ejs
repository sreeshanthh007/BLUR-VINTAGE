    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>BLUR VINTAGE</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.2/font/bootstrap-icons.css">
        <link rel="stylesheet" href="/styles/buyingInterface.css">
        <style>
            .color-circle {
        width: 30px;
        height: 30px;
        border-radius: 50%;
        border: 2px solid #ddd;
        cursor: pointer;
    }

    .color-circle:hover {
        border-color: #999;
    }

    .related-products-container {
            position: relative;
        }
        .price-container {
        margin: 1rem 0;
    }

    .original-price {
        color: #6c757d;
        text-decoration: line-through !important;
    }

    .final-price {
        font-weight: bold;
    }

    .offer-badge {
        background-color: rgba(220, 53, 69, 0.1);
        border-radius: 4px;
        padding: 4px 8px;
        display: inline-block;
    }

    .text-decoration-line-through {
        text-decoration: line-through !important;
    }
        .related-products-container {
            position: relative;
        }

        .styles-side-scroll {
            display: flex;
            overflow-x: hidden;
            scroll-behavior: smooth;
            gap: 1rem;
            position: relative;
        }

        .styles-side-scroll .col-6.col-md-3 {
            flex: 0 0 calc(25% - 0.75rem);
            max-width: calc(25% - 0.75rem);
        }

        .scroll-btn {
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            background-color: rgba(255,255,255,0.8);
            border: 1px solid #ddd;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            z-index: 10;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }

        .scroll-btn-prev {
            left: -20px;
        }

        .scroll-btn-next {
            right: -20px;
        }

        .scroll-btn:hover {
            background-color: rgba(240,240,240,0.9);
        }

        @media (max-width: 768px) {
            .styles-side-scroll .col-6.col-md-3 {
                flex: 0 0 calc(50% - 0.5rem);
                max-width: calc(50% - 0.5rem);
            }
        }

    .color-circle.active {
        border-color: #000;
    }
    .size-btn {
            padding: 8px 16px;
            border: 1px solid #ccc;
            background-color: white;
            color: black;
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        .size-btn.active {
            background-color: white; /* Bootstrap primary color */
            color: white;
            border-color:white
        }
        </style>
    </head>
    <body>
        <!-- Header -->
        <%-include ("../../views/partials/user/header")%>
        
        <!-- Main Content -->
        <main class="container-fluid px-4 py-5">
            <div class="row">
                <!-- Product Images -->
                <div class="col-12 col-lg-7 mb-4 mb-lg-0">
                    <div class="product-gallery">
                        <!-- Status Indicator -->
                        <!-- <div class="status-indicator"></div> -->
                        
                        <!-- Main Image Container -->
                        <div class="main-image-container mb-3">
                            <% if (product.variants && product.variants.length > 0) { %>
                                <% product.variants[0].productImage.forEach(image => { %>
                                    <div class="image-zoom">
                                        <img src="<%= image %>?v=<%= Date.now() %>" 
                                            alt="Product main view" 
                                            class="img-fluid">
                                    </div>
                                <% }) %>
                            <% } %>
                        </div>
        

                        
                        <!-- Thumbnails -->
                        <div class="thumbnails-container">
                            <div class="thumbnails-scroll">
                                <% if (product.variants && product.variants.length > 0) { %>
                                    <% product.variants[0].productImage.forEach((image, index) => { %>
                                        <div class="thumbnail-wrapper">
                                            <div class="thumbnail <%= index === 0 ? 'active' : '' %>">
                                                <img src="<%= image %>" alt="Product view <%= index + 1 %>">
                                            </div>
                                        </div>
                                    <% }) %>
                                <% } %>
                            </div>
                        </div>
                    </div>
                </div

                <!-- Product Details -->

                <div class="col-12 col-lg-5">
                    <div class="product-details">
                        <h2 class="product-title fs-3 fw-bold"><%= product.productName %></h2>
                        
                        <!-- Price Display Section -->
                        <div class="price-container my-3">
                            <% if (product.discount && product.discount > 0) { %>
                                <!-- Price with Discount -->
                                <div class="d-flex align-items-center gap-2 mb-2">
                                    <p class="fs-4 mb-0">
                                        <div class="offer-display"></div>
                                        <span class="text-secondary text-decoration-line-through me-2">
                                            ₹<%= product.originalPrice.toLocaleString('en-IN', { maximumFractionDigits: 2, minimumFractionDigits: 2 }) %>
                                        </span>
                                        <span class="text-dark fw-bold">
                                            ₹<%= product.finalPrice.toLocaleString('en-IN', { maximumFractionDigits: 2, minimumFractionDigits: 2 }) %>
                                        </span>
                                    </p>
                                </div>
                                
                                <!-- Offer Badge -->
                                <div class="offer-badge bg-danger bg-opacity-10 rounded px-3 py-2 d-inline-block">
                                    <span class="text-danger">
                                        <strong><%= product.discount %>% OFF</strong>
                                        <% if (product.offerName) { %>
                                            <span class="ms-1">- <%= product.offerName %></span>
                                        <% } %>
                                    </span>
                                </div>
                    
                                <!-- Best Price Tag -->
                                <div class="mt-2 text-success">
                                    <i class="bi bi-tag-fill me-1"></i>
                                    Best price with 
                                    <% if (product.productOffer && product.discount === product.productOffer.discount) { %>
                                        product offer
                                    <% } else if (product.category?.categoryOffer && product.discount === product.category.categoryOffer.discount) { %>
                                        category offer
                                    <% } %>
                                </div>
                            <% } else { %>
                                <!-- Regular Price without Discount -->
                                <p class="fs-4 fw-bold mb-0">
                                    ₹<%= product.originalPrice.toLocaleString('en-IN', { maximumFractionDigits: 2, minimumFractionDigits: 2 }) %>
                                </p>
                            <% } %>
                        </div>

                    <!-- Color Options -->
                    <div class="color-options mb-4">
                        <h6 class="mb-2">Available Colors:</h6>
                        <div class="d-flex gap-2">
                            <% product.variants.forEach((variant, index) => { %>
                                <div class="color-circle <%= index === 0 ? 'active' : '' %>" 
                                    data-color="<%= variant.color %>"
                                    data-color-name="<%= variant.colorName %>"
                                    style="background-color: <%= variant.color %>"
                                    title="<%= variant.colorName %>">
                                </div>
                            <% }) %>
                        </div>
                    </div>

                    <!-- Size Options -->
                    <div class="size-options mb-4">
                        <h6 class="mb-2">Select Size:</h6>
                        <div class="d-flex gap-2 flex-wrap">
                            <!-- Size buttons will be dynamically inserted here -->
                        </div>
                    </div>

                    <div id="cartButtonContainer">
                        <% if (product.variants && product.variants.length > 0 && product.variants[0].stock > 0) { %>
                            <button class="btn btn-dark w-100 py-3 mb-3" id="addToCart">ADD TO CART</button>
                        <% } else { %>
                            <button class="btn btn-danger w-100 py-3 mb-3" disabled>OUT OF STOCK</button>
                        <% } %>
                    </div>

                        <div class="text-center mt-2">
                            <i id="wishlistToggle" class="bi bi-heart fs-4 text-muted" style="cursor: pointer;"></i>
                            <i id="wishlistToggleFilled" class="bi bi-heart-fill fs-4 text-danger d-none" style="cursor: pointer;"></i>
                        </div>
                    </div>
                
                        <!-- Product Info -->
                        <div class="product-info">
                            <div class="d-flex align-items-center mb-2">
                                <i class="bi bi-shop me-2"></i>
                                <span>Not available in stores</span>
                            </div>
                            <div class="d-flex align-items-center mb-3">
                                <i class="bi bi-truck me-2"></i>
                                <span>Delivery time: 2-7 Days</span>
                            </div>
                            <div class="d-flex align-items-center mb-3">
                                <div class="ratings">
                                    <i class="bi bi-star-fill"></i>
                                    <i class="bi bi-star-fill"></i>
                                    <i class="bi bi-star-fill"></i>
                                    <i class="bi bi-star-fill"></i>
                                    <i class="bi bi-star"></i>
                                </div>
                                <span class="ms-2">(90 Reviews)</span>
                            </div>
                        </div>
                        <div class="stock-info mb-4">
                            <div class="stock-info mb-4">
                                <h6 class="mb-2">Stock Available:</h6>
                                <div id="stockDisplay" class="d-flex gap-2 flex-wrap">
                                    <% if (product.variants && product.variants.length > 0) { %>
                                        <% const selectedVariant = product.variants[0] %>
                                        <p class="mb-0">
                                            <% if (selectedVariant.stock > 0) { %>
                                                <span class="text-success">
                                                    <%= selectedVariant.stock %> items
                                                </span> 
                                                available in <%= selectedVariant.colorName %> / <%= selectedVariant.size %>
                                            <% } else { %>
                                                <span class="text-danger">
                                                    Out of Stock
                                                </span>
                                                in <%= selectedVariant.colorName %> / <%= selectedVariant.size %>
                                            <% } %>
                                        </p>
                                    <% } %>
                                </div>
                            </div>
                        <!-- Accordion -->
                        <div class="accordion" id="productAccordion">
                            <div class="accordion-item">
                                <h3 class="accordion-header">
                                    <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#description">
                                        Description & fit
                                    </button>
                                </h3>
                                <div id="description" class="accordion-collapse collapse show" data-bs-parent="#productAccordion">
                                    <div class="accordion-body">
                                        <%=product.description%>
                                    </div>
                                </div>
                            </div>
                            <div class="accordion-item">
                                <h3 class="accordion-header">
                                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#materials">
                                        Materials
                                    </button>
                                </h3>
                                <div id="materials" class="accordion-collapse collapse" data-bs-parent="#productAccordion">
                                    <div class="accordion-body">
                                        100% Cotton
                                        Machine washable
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Styles With Section -->
            <!-- <section class="mt-5">
                <h3 class="mb-4">Styles With</h3>
                <div class="row g-2 styles-grid">
                    <div class="col-3">
                        <div class="product-card">
                            <img src="https://image.hm.com/assets/hm/30/3b/303b85d60eb5e0836e0f2756ff207fc0b59c0c41.jpg?imwidth=564" alt="Related product" class="img-fluid mb-2">
                            <h4 class="product-name">Beige Jacket</h4>
                            <p class="product-price">Rs. 2499.00</p>
                        </div>
                    </div>
                    <div class="col-3">
                        <div class="product-card">
                            <img src="https://image.hm.com/assets/hm/30/3b/303b85d60eb5e0836e0f2756ff207fc0b59c0c41.jpg?imwidth=564" alt="Related product" class="img-fluid mb-2">
                            <h4 class="product-name">Black T-Shirt</h4>
                            <p class="product-price">Rs. 799.00</p>
                        </div>
                    </div>
                    <div class="col-3">
                        <div class="product-card">
                            <img src="https://image.hm.com/assets/hm/30/3b/303b85d60eb5e0836e0f2756ff207fc0b59c0c41.jpg?imwidth=564" alt="Related product" class="img-fluid mb-2">
                            <h4 class="product-name">Crossbody Bag</h4>
                            <p class="product-price">Rs. 1299.00</p>
                        </div>
                    </div>
                    <div class="col-3">
                        <div class="product-card">
                            <img src="https://image.hm.com/assets/hm/30/3b/303b85d60eb5e0836e0f2756ff207fc0b59c0c41.jpg?imwidth=564" alt="Related product" class="img-fluid mb-2">
                            <h4 class="product-name">White Shirt</h4>
                            <p class="product-price">Rs. 1499.00</p>
                        </div>
                    </div>
                </div>
            </section> -->

            <!-- more from men -->
            <section class="mt-5">
                <h3 class="mb-4">More From <%= product.category.name.charAt(0).toUpperCase() + product.category.name.slice(1) %></h3>
                <div class="related-products-container position-relative">
                    <!-- Previous button -->
                    <button class="scroll-btn scroll-btn-prev" id="prevRelatedProducts">
                        <i class="bi bi-chevron-left"></i>
                    </button>
                    
                    <div class="styles-side-scroll" id="relatedProductsScroll">
                        <% if (relatedProducts && relatedProducts.length > 0) { %>
                            <% relatedProducts.forEach(relatedProduct => { %>
                                <div class="col-6 col-md-3">
                                    <div class="product-card position-relative">
                                        <a href="/user/buy?id=<%= relatedProduct._id %>" class="text-decoration-none">
                                            <div class="product-image-container">
                                                <% if (relatedProduct.variants && relatedProduct.variants.length > 0 && 
                                                    relatedProduct.variants[0].productImage && 
                                                    relatedProduct.variants[0].productImage.length > 0) { %>
                                                    <img src="<%= relatedProduct.variants[0].productImage[0] %>" 
                                                        alt="<%= relatedProduct.productName %>" 
                                                        class="img-fluid mb-3">
                                                <% } else { %>
                                                    <img src="/images/default-product.jpg" 
                                                        alt="No image available" 
                                                        class="img-fluid mb-3">
                                                <% } %>
                                            </div>
                                            <div class="product-info p-2">
                                                <h4 class="product-name text-dark mb-2"><%= relatedProduct.productName %></h4>
                                                <% if (relatedProduct.discount > 0) { %>
                                                    <p class="product-price mb-0">
                                                        <span class="text-muted text-decoration-line-through">
                                                            Rs. <%= relatedProduct.originalPrice.toLocaleString() %>
                                                        </span>
                                                        <span class="text-dark fw-bold ms-2">
                                                            Rs. <%= relatedProduct.finalPrice.toLocaleString() %>
                                                        </span>
                                                    </p>
                                                    <small class="text-danger"><%= relatedProduct.discount %>% OFF</small>
                                                <% } else { %>
                                                    <p class="product-price mb-0 text-dark fw-bold">
                                                        Rs. <%= relatedProduct.originalPrice.toLocaleString() %>
                                                    </p>
                                                <% } %>
                                                <% if (relatedProduct.variants[0].stock <= 5) { %>
                                                    <small class="text-danger">Only <%= relatedProduct.variants[0].stock %> left</small>
                                                <% } %>
                                            </div>
                                        </a>
                                    </div>
                                </div>
                            <% }); %>
                        <% } else { %>
                            <div class="col-12">
                                <p class="text-center text-muted">No related products found</p>
                            </div>
                        <% } %>
                    </div>
                    <button class="scroll-btn scroll-btn-next" id="nextRelatedProducts">
                        <i class="bi bi-chevron-right"></i>
                    </button>
                </div>
            </section>
        </main>
        
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script type="application/json" id="productData">
            <%- JSON.stringify(product) %>
        </script>
        <!-- Footer -->
        <%-include ("../../views/partials/user/footer")%>

        
        <script>
    function updateProductImages(variantImages) {
        const mainImageContainer = document.querySelector('.main-image-container');
        const thumbnailsContainer = document.querySelector('.thumbnails-scroll');
        
        // Update main image container
        mainImageContainer.innerHTML = variantImages.map(image => `
            <div class="image-zoom">
                <img src="${image}?v=${Date.now()}" 
                    alt="Product main view"    
                    class="img-fluid">
            </div>
        `).join('');

        // Update thumbnails
        thumbnailsContainer.innerHTML = variantImages.map((image, index) => `
            <div class="thumbnail-wrapper">
                <div class="thumbnail ${index === 0 ? 'active' : ''}">
                    <img src="${image}" alt="Product view ${index + 1}">
                </div>
            </div>
        `).join('');

        
        initializeZoom();
        initializeThumbnailClicks();
    }


    function updatePriceAndOffer(variant) {
        const priceContainer = document.querySelector('.price-container');
        
        if (!priceContainer) return;

        if (variant.discount && variant.discount > 0) {
            priceContainer.innerHTML = `
                <div class="d-flex align-items-center gap-2 mb-2">
                    <p class="fs-4 mb-0">
                        <span class="text-secondary text-decoration-line-through me-2">
                            ₹${variant.originalPrice.toLocaleString('en-IN', { maximumFractionDigits: 2, minimumFractionDigits: 2 })}
                        </span>
                        <span class="text-dark fw-bold">
                            ₹${variant.finalPrice.toLocaleString('en-IN', { maximumFractionDigits: 2, minimumFractionDigits: 2 })}
                        </span>
                    </p>
                </div>
                <div class="offer-badge bg-danger bg-opacity-10 rounded px-3 py-2 d-inline-block">
                    <span class="text-danger">
                        <strong>${variant.discount}% OFF</strong>
                        ${variant.offerName ? `<span class="ms-1">- ${variant.offerName}</span>` : ''}
                    </span>
                </div>
                <div class="mt-2 text-success">
                    <i class="bi bi-tag-fill me-1"></i>
                    Best price with offer
                </div>
            `;
        } else {
            priceContainer.innerHTML = `
                <p class="fs-4 fw-bold mb-0">
                    ₹${variant.originalPrice.toLocaleString('en-IN', { maximumFractionDigits: 2, minimumFractionDigits: 2 })}
                </p>
            `;
        }
    }

    function updateSizes(selectedColor) {
        const productData = JSON.parse(document.getElementById('productData').textContent);
        const sizeOptionsContainer = document.querySelector('.size-options .d-flex');
        
        const availableVariants = productData.variants.filter(variant => 
            variant.color === selectedColor
        );

        // Clear current size buttons
        sizeOptionsContainer.innerHTML = '';

        // Calculate prices and discount for the selected color variant
        const firstVariant = availableVariants[0];
        if (firstVariant) {
            const variantPrice = firstVariant.price;
            const originalPrice = variantPrice;
            let finalPrice = variantPrice;
            let bestDiscount = 0;
            let offerName = "";

            const now = new Date();

            // Check product offer
            if (productData.productOffer && 
                now >= new Date(productData.productOffer.startDate) && 
                now <= new Date(productData.productOffer.expiryDate)) {
                const productDiscount = productData.productOffer.discount;
                if (productDiscount > bestDiscount) {
                    bestDiscount = productDiscount;
                    finalPrice = originalPrice - (originalPrice * (productDiscount / 100));
                    offerName = productData.productOffer.offerName;
                }
            }

            // Check category offer
            if (productData.category?.categoryOffer &&
                now >= new Date(productData.category.categoryOffer.startDate) &&
                now <= new Date(productData.category.categoryOffer.expiryDate)) {
                const categoryDiscount = productData.category.categoryOffer.discount;
                if (categoryDiscount > bestDiscount) {
                    bestDiscount = categoryDiscount;
                    finalPrice = originalPrice - (originalPrice * (categoryDiscount / 100));
                    offerName = productData.category.categoryOffer.offerName;
                }
            }

            // Create variant object with calculated prices
            const variantWithPrices = {
                ...firstVariant,
                originalPrice: originalPrice,
                finalPrice: Math.round(finalPrice),
                discount: bestDiscount,
                offerName: offerName
            };

            // Update price display immediately for the first variant
            updatePriceAndOffer(variantWithPrices);
        }

        // Create size buttons
        availableVariants.forEach((variant, index) => {
            const sizeButton = document.createElement('button');
            sizeButton.className = 'size-btn';
            if (variant.stock > 0) {
                sizeButton.classList.add(index === 0 ? 'active' : '');
            } else {
                sizeButton.classList.add('out-of-stock');
                sizeButton.disabled = true;
                sizeButton.style.opacity = '0.5';
                sizeButton.style.textDecoration = 'line-through';
            }
            
            sizeButton.dataset.size = variant.size;
            sizeButton.dataset.variantId = variant._id;
            sizeButton.textContent = variant.size;
            
            sizeButton.addEventListener('click', function() {
                if (variant.stock <= 0) return;
                
                document.querySelectorAll('.size-btn').forEach(btn => 
                    btn.classList.remove('active')
                );
                this.classList.add('active');
                
                // Calculate prices for the selected size variant
                const variantPrice = variant.price;
                const originalPrice = variantPrice;
                let finalPrice = variantPrice;
                let bestDiscount = 0;
                let offerName = "";

                const now = new Date();

                // Check product offer
                if (productData.productOffer && 
                    now >= new Date(productData.productOffer.startDate) && 
                    now <= new Date(productData.productOffer.expiryDate)) {
                    const productDiscount = productData.productOffer.discount;
                    if (productDiscount > bestDiscount) {
                        bestDiscount = productDiscount;
                        finalPrice = originalPrice - (originalPrice * (productDiscount / 100));
                        offerName = productData.productOffer.offerName;
                    }
                }

                // Check category offer
                if (productData.category?.categoryOffer &&
                    now >= new Date(productData.category.categoryOffer.startDate) &&
                    now <= new Date(productData.category.categoryOffer.expiryDate)) {
                    const categoryDiscount = productData.category.categoryOffer.discount;
                    if (categoryDiscount > bestDiscount) {
                        bestDiscount = categoryDiscount;
                        finalPrice = originalPrice - (originalPrice * (categoryDiscount / 100));
                        offerName = productData.category.categoryOffer.offerName;
                    }
                }

                const variantWithPrices = {
                    ...variant,
                    originalPrice: originalPrice,
                    finalPrice: Math.round(finalPrice),
                    discount: bestDiscount,
                    offerName: offerName
                };
                
                updatePriceAndOffer(variantWithPrices);
                updateAddToCartButton(variant);
                updateStockDisplay(variant);
            });

            sizeOptionsContainer.appendChild(sizeButton);
        });

        // If there are available variants, update the price to the first one
        if (availableVariants.length > 0) {
            updateAddToCartButton(availableVariants[0]);
            updateStockDisplay(availableVariants[0]);
        }
    }

    function updateStockDisplay(variant) {
        const stockDisplay = document.getElementById('stockDisplay');
        if (stockDisplay) {
            stockDisplay.innerHTML = `
                <p class="mb-0">
                    ${variant.stock > 0 ? 
                        `<span class="text-success">${variant.stock} items</span> available` : 
                        '<span class="text-danger">Out of Stock</span>'
                    } in ${variant.colorName} / ${variant.size}
                </p>
            `;
        }
    }

    function initializeZoom() {
        document.querySelectorAll('.image-zoom').forEach(container => {
            const img = container.querySelector('img');
            
            container.addEventListener('mousemove', (e) => {
                const { left, top, width, height } = container.getBoundingClientRect();
                const x = (e.clientX - left) / width;
                const y = (e.clientY - top) / height;
                img.style.transformOrigin = `${x * 100}% ${y * 100}%`;
            });

            container.addEventListener('mouseenter', () => {
                img.style.transform = 'scale(1.5)';
            });

            container.addEventListener('mouseleave', () => {
                img.style.transform = 'scale(1)';
                img.style.transformOrigin = 'center center';
            });
        });
    }

    function initializeThumbnailClicks() {
        document.querySelectorAll('.thumbnail').forEach(thumb => {
            thumb.addEventListener('click', () => {
                document.querySelectorAll('.thumbnail').forEach(t => 
                    t.classList.remove('active')
                );
                thumb.classList.add('active');
                const mainImage = document.querySelector('.main-image-container img');
                const thumbImage = thumb.querySelector('img');
                mainImage.src = thumbImage.src;
            });
        });
    }

    function updateAddToCartButton(variant) {
        const buttonContainer = document.getElementById('cartButtonContainer');
        if (variant && variant.stock > 0) {
            buttonContainer.innerHTML = `
                <button class="btn btn-dark w-100 py-3 mb-3" id="addToCart">ADD TO CART</button>
            `;
            // Reattach click event listener
            const addToCartButton = document.getElementById('addToCart');
            if (addToCartButton) {
                addToCartButton.addEventListener('click', addToCartHandler);
            }
        } else {
            buttonContainer.innerHTML = `
                <button class="btn btn-danger w-100 py-3 mb-3" disabled>OUT OF STOCK</button>
            `;
        }
    }

        async function updateCartCounter(){
        try {
            const response  = await fetch('/user/cart/count');

            if (!response.ok) {
                throw new Error('Failed to fetch cart count');
            }

            const data = await response.json();
            console.log("cart counter",data )
            const counter = document.getElementById('cartCounter');

            if(counter){
                counter.textContent = data.count || '0';

                counter.style.display = data.count >0 ? "block" : "none";
            }


        } catch (error) {
            console.log("error in cart counter",error.message);
            
        }
    }

    async function addToCartHandler() {
        const selectedColorElement = document.querySelector(".color-circle.active");
        if (!selectedColorElement) {
            Swal.fire({
                icon: "info",
                title: "Please select a color",
            });
            return;
        }

        const selectedSizeElement = document.querySelector(".size-btn.active");
        if (!selectedSizeElement) {
            Swal.fire({
                icon: "info",
                title: "Please select a size"
            });
            return;
        }

        const productData = JSON.parse(document.getElementById('productData').textContent);

        // Find the selected variant and check stock
        const selectedVariant = productData.variants.find(v => 
            v.color === selectedColorElement.dataset.color && 
            v.colorName === selectedColorElement.dataset.colorName && 
            v.size === selectedSizeElement.dataset.size
        );

        if (!selectedVariant || selectedVariant.stock <= 0) {
            Swal.fire({
                icon: "error",
                title: "Out of Stock",
                text: "This item is currently out of stock"
            });
            return;
        }

        const data = {
            productId: productData._id,
            quantity: 1,
            color: selectedColorElement.dataset.color,
            colorName: selectedColorElement.dataset.colorName,
            size: selectedSizeElement.dataset.size
        };

        try {
            const response = await fetch('/user/cart/add', {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(data),
            });

            if (!response.ok) {
                if (response.redirected) {
                    window.location.href = response.url;
                    return;
                }
                const errorData = await response.json();
                throw new Error(errorData.message || 'Failed to add product');
            }

            const result = await response.json();

            if (result.success) {
                await updateCartCounter()
                updateStockDisplay({
                    ...selectedVariant,
                    stock: result.newStock,
                    colorName: data.colorName,
                    size: data.size
                });

            
                selectedVariant.stock = result.newStock;
                document.getElementById('productData').textContent = JSON.stringify(productData);

                // Update Add to Cart button if stock is now 0
                if (result.newStock <= 0) {
                    updateAddToCartButton({
                        ...selectedVariant,
                        stock: result.newStock
                    });
                }

                Swal.fire({
                    icon: "success",
                    title: "Success",
                    text: result.message
                });
            } else {
                throw new Error(result.message || 'Failed to add product');
            }
        } catch (error) {
            console.error("Error in buying interface:", error);
            Swal.fire({
                icon: "error",
                title: "Error",
                text: error.message || "Failed to add product to cart. Please try again."
            });
        }
    }

        

    // Single DOMContentLoaded event listener for initialization
    document.addEventListener('DOMContentLoaded', function() {
        const colorCircles = document.querySelectorAll('.color-circle');
        const productData = JSON.parse(document.getElementById('productData').textContent);
        const scrollContainer = document.getElementById('relatedProductsScroll');
        const prevBtn = document.getElementById('prevRelatedProducts');
        const nextBtn = document.getElementById('nextRelatedProducts');

    
        if (colorCircles.length === 1) {
            colorCircles[0].classList.add('active');
            const firstColor = colorCircles[0].dataset.color;
            updateSizes(firstColor);
        }

        
        colorCircles.forEach(circle => {
            circle.addEventListener('click', function() {
                colorCircles.forEach(c => c.classList.remove('active'));
                this.classList.add('active');
                
                const selectedColor = this.dataset.color;
                const selectedVariant = productData.variants.find(variant => 
                    variant.color === selectedColor
                );

                if (selectedVariant) {
                    updateProductImages(selectedVariant.productImage);
                    updateSizes(selectedColor);
                    updateStockDisplay(selectedVariant);
                    updateAddToCartButton(selectedVariant);
                }
            });
        });

        
        initializeZoom();
        initializeThumbnailClicks();

        // Initialize sizes for the first color
        if (colorCircles.length > 0) {
            const firstColor = colorCircles[0].dataset.color;
            updateSizes(firstColor);
        }

    
        if (scrollContainer && prevBtn && nextBtn) {
            const scrollAmount = scrollContainer.querySelector('.col-6.col-md-3')?.offsetWidth * 4;

            if (scrollContainer.children.length <= 4) {
                prevBtn.style.display = 'none';
                nextBtn.style.display = 'none';
            }

            nextBtn.addEventListener('click', () => {
                scrollContainer.scrollBy({
                    left: scrollAmount,
                    behavior: 'smooth'
                });
            });

            prevBtn.addEventListener('click', () => {
                scrollContainer.scrollBy({
                    left: -scrollAmount,
                    behavior: 'smooth'
                });
            });
        }

        const wishlistToggle = document.getElementById('wishlistToggle');
        const wishlistToggleFilled = document.getElementById('wishlistToggleFilled');

        
        function addToWishlist() {
       
        const activeColorCircle = document.querySelector('.color-circle.active');
        const activeSizeButton = document.querySelector('.size-btn.active');
        const productData = JSON.parse(document.getElementById('productData').textContent);

       
        if (!activeColorCircle) {
            Swal.fire({
                icon: 'warning',
                title: 'Select Color',
                text: 'Please select a color before adding to wishlist'
            });
            return;
        }

       
        if (!activeSizeButton) {
            Swal.fire({
                icon: 'warning',
                title: 'Select Size',
                text: 'Please select a size before adding to wishlist'
            });
            return;
        }

        const variantColor = activeColorCircle.dataset.color;
        const variantColorName = activeColorCircle.dataset.colorName;
        const variantSize = activeSizeButton.dataset.size;

        // Find the selected variant from product data
        const selectedVariant = productData.variants.find(v => 
            v.color === variantColor && 
            v.colorName === variantColorName && 
            v.size === variantSize
        );

        if (!selectedVariant) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Selected variant not found'
            });
            return;
        }

        // Send request to add to wishlist
        fetch('/user/wishlist/add', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                productId: productData._id,
                variantColor: selectedVariant.color,
                variantColorName: selectedVariant.colorName,
                variantSize: selectedVariant.size,
                variantStock: selectedVariant.stock,
                variantPrice: selectedVariant.price,
                variantImage: selectedVariant.productImage
            })
        })
        .then(response => {
            if (!response.ok) {
                // Check if response is a redirect
                if (response.redirected) {
                    window.location.href = response.url;
                    return;
                }
                return response.json().then(errorData => {
                    throw new Error(errorData.message || 'Failed to add to wishlist');
                });
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                
                const wishlistToggle = document.getElementById('wishlistToggle');
                const wishlistToggleFilled = document.getElementById('wishlistToggleFilled');
                wishlistToggle.classList.add('d-none');
                wishlistToggleFilled.classList.remove('d-none');

                // Update wishlist counter
                updateWishlistCounter();
                
                Swal.fire({
                    icon: 'success',
                    title: 'Added to Wishlist',
                    text: data.message
                });
            }
        })
        .catch(error => {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: error.message || 'Something went wrong'
            });
        });
    }

        wishlistToggle.addEventListener('click',addToWishlist)
        
    }); 
        </script>
    </body>
    </html>
