<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BLUR VINTAGE ★ AAA</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.2/font/bootstrap-icons.css">
    <link rel="stylesheet" href="/styles/landingpage.css">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

    <style>
           .search-result-item {
    padding: 15px 20px; /* Increased padding for better size */
    border-bottom: 1px solid #eee;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 15px; /* Slightly increased gap between icon and text */
    font-size: 1.1rem; /* Increased font size */
}

.search-result-item:hover {
    background-color: #f8f9fa;
}

.search-result-item img {
    width: 50px; /* Increased size of the image */
    height: 50px;
    object-fit: cover;
}

.search-result-info {
    flex: 1;
}

.search-result-name {
    font-weight: 600; /* Slightly bolder text */
    margin-bottom: 5px; /* Increased margin for spacing */
    font-size: 1rem; /* Adjusted font size */
}

.search-result-price {
    color: #666;
    font-size: 0.95rem; /* Adjusted font size for price */
}

.form-select-sm {
    padding-right: 2rem;
    background-color: white;
    border: 1px solid #dee2e6;
    border-radius: 4px;
    font-size: 1rem; /* Increased font size for dropdown */
    padding: 10px; /* Increased padding inside select box */
}

.form-select-sm:focus {
    border-color: black;
    box-shadow: none;
}

@media (max-width: 768px) {
    .search-container {
        max-width: 100%;
    }

    .nav-menu a {
        padding: 1rem 2rem; /* Larger padding for nav items */
        font-size: 1.2rem; /* Adjusted font size */
    }

    .icon-link {
        margin-left: 1rem;
        font-size: 1.5rem; /* Larger icon size */
    }
}

        </style>
    </head>

    <!-- header starts -->
    <body>
        <header class="py-3 bg-light">
            <div class="container">
                <div class="row align-items-center">

                    
                    <!-- Left Section -->
                    <div class="col-4 d-flex align-items-center justify-content-start">
                        <a href="#" class="text-dark me-3 text-decoration-none">Contact Us</a>
                    </div>
        
                    <!-- Center Section -->
                    <div class="col-4 text-center">
                        <a class="m-0" style="font-family: 'Joan';font-size: 25px; text-decoration: none; color: black;" href="/user/home">BLUR VINTAGE ★</a>
                    </div>
        
                    <!-- Right Section -->
                    <div class="col-lg-3 col-md-4">
                        <div class="d-flex align-items-center justify-content-end">
                            <form class="d-flex me-3 position-relative">
                                <input id="searchInput" class="form-control form-control-sm" type="text" placeholder="Search..." oninput="searchProducts()" aria-label="Search">
                                <button class="btn btn-outline-dark btn-md" type="submit">
                                    <i class="bi bi-search"></i>
                                </button>
                                <!-- Add this div for search results -->
                                <div id="searchResults" class="position-absolute w-100 bg-white shadow-sm rounded-bottom" 
                                    style="top: 100%; left: 0; z-index: 1000; display: none; max-height: 400px; overflow-y: auto;">
                                </div>
                            </form> 
                            <% if (locals.user) { %>
                              
                                <a class="bi bi-person me-3" style="font-size: 1.5rem; color: black;" href="/user/manage"></a>
                                <div class="position-relative me-3">
                                    <a class="bi bi-cart" href="/user/cart" style="font-size: 1.5rem; color: black;"></a>
                                    <span id="cartCounter" class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" 
                                          style="font-size: 0.75rem; margin-top: 5px;">
                                        0
                                    </span>
                                </div>
                                <div class="position-relative me-3">
                                    <a class="bi bi-heart" style="font-size: 1.5rem; color: black;" href="/user/wishlist"></a>
                                    <span id="wishlist-counter" class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" 
                                          style="font-size: 0.75rem; margin-top: 5px; display: none;">
                                        0
                                    </span>
                                </div>
                            <% } else { %>
                                <a href="/user/login" class="text-dark text-decoration-none me-2">Login</a>
                                <span class="text-dark mx-2">|</span>
                                <a href="/user/register" class="text-dark text-decoration-none">Signup</a>
                            <% } %>
                        </div>
                    </div>
                </div>
        
                <!-- Men, Women, Kids Navigation -->
                <div class="row mt-3">
                    <div class="col-12 text-center">
                        <nav class="nav justify-content-center">
                            <a class="nav-link mx-4 text-dark" href="/user/shop" style="font-size: 1.2rem;">Shop</a>
                            <a class="nav-link mx-4 text-dark" href="/user/men" style="font-size: 1.2rem;">Men</a>
                            <a class="nav-link mx-4 text-dark" href="/user/women" style="font-size: 1.2rem;">Women</a>
                            <a class="nav-link mx-4 text-dark" href="/user/kids" style="font-size: 1.2rem;">Kids</a>
                        </nav>
                    </div>
                </div>

                <div class="row mt-3">
                    <div class="col-12 d-flex justify-content-end pe-4">
                        <select id="sortSelect" class="form-select form-select-sm" style="width: auto;">
                            <option value="default" disabled selected>Sort By</option>
                            <option value="price-high-low">Price: High to Low</option>
                            <option value="price-low-high">Price: Low to High</option>
                            <option value="name-a-z">Name: A to Z</option>
                            <option value="name-z-a">Name: Z to A</option>
                            <option value="new-arrivals">New Arrivals</option>
                        </select>
                    </div>
                </div>
            </div>
        </header>
        <!-- header ends -->


        <script>


document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('searchInput');
    const searchResults = document.getElementById('searchResults');
    const sortSelect = document.getElementById('sortSelect');
    const searchButton = document.querySelector('.btn-outline-dark');
    let debounceTimer;

   
        updateWishlistCounter()
       
        updateCartCounter()
   
   function getCurrentCategory() {
        const path = window.location.pathname;
        if (path.includes('/men')) return 'men';
        if (path.includes('/women')) return 'women';
        if (path.includes('/kids')) return 'kids';
        return '';
    }

    function escapeRegExp(string) {
        return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }

    function highlightMatch(text, query) {
        if (!query) return text;
        const regex = new RegExp(`(${escapeRegExp(query)})`, 'gi');
        return text.replace(regex, '<strong>$1</strong>');
    }

    async function searchProducts(query) {
        try {
            const currentPath = window.location.pathname;
            const sortValue = sortSelect ? sortSelect.value : 'default';
            const searchParams = new URLSearchParams();
            
            if (query.trim()) {
                searchParams.set('search', query);
            }
            
            if (sortValue !== 'default') {
                searchParams.set('sort', sortValue);
            }
            
            // Always set strict filtering except for shop page
            if (currentPath.includes('/shop')) {
                searchParams.set('page_context', 'shop');
                searchParams.set('strict_filter', 'false');
            } else {
                const category = getCurrentCategory();
                if (category) {
                    searchParams.set('category', category);
                    searchParams.set('strict_filter', 'true');
                }
            }
            
            window.location.href = `/user/search?${searchParams.toString()}`;
        } catch (error) {
            console.error('Search error:', error);
        }
    }

    searchInput.addEventListener('input', (e) => {
        const query = e.target.value.trim();
        const currentCategory = getCurrentCategory();
        
        if (query.length >= 2) {
            clearTimeout(debounceTimer);
            debounceTimer = setTimeout(async () => {
                try {
                    const searchParams = new URLSearchParams({
                        search: query,
                        suggest: 'true',
                        strict_filter: currentCategory ? 'true' : 'false'
                    });

                    if (currentCategory) {
                        searchParams.set('category', currentCategory);
                    }

                    const response = await fetch(`/user/search?${searchParams.toString()}`);
                    const data = await response.json();

                    if (data.products && data.products.length > 0) {
                        // Filter products based on category if we're on a category page
                        const filteredProducts = currentCategory 
                            ? data.products.filter(product => 
                                product.category && 
                                product.category.name.toLowerCase() === currentCategory.toLowerCase())
                            : data.products;

                        if (filteredProducts.length > 0) {
                            const resultsHtml = filteredProducts.map(product => `
                                <div class="search-result-item" onclick="window.location.href='/user/buy?id=${product._id}'">
                                    <img src="${product.variants[0]?.productImage[0] || '/images/default-product.jpg'}" 
                                        alt="${product.productName}">
                                    <div class="search-result-info">
                                        <div class="search-result-name">
                                            ${highlightMatch(product.productName, query)}
                                        </div>
                                        <div class="search-result-price">
                                            Rs/-${product.variants[0]?.price || 'Price not available'}
                                        </div>
                                    </div>
                                </div>
                            `).join('');

                            searchResults.innerHTML = resultsHtml;
                            searchResults.style.display = 'block';
                        } else {
                            searchResults.innerHTML = '<div class="p-3 text-center text-muted">No products found in this category</div>';
                            searchResults.style.display = 'block';
                        }
                    } else {
                        searchResults.innerHTML = '<div class="p-3 text-center text-muted">No products found</div>';
                        searchResults.style.display = 'block';
                    }
                } catch (error) {
                    console.error('Suggestion error:', error);
                }
            }, 300);
        } else {
            searchResults.style.display = 'none';
        }   
    });

    // Handle form submission
    searchInput.closest('form').addEventListener('submit', (e) => {
        e.preventDefault();
        const query = searchInput.value.trim();
        searchProducts(query);
    });

    searchButton.addEventListener('click', (e) => {
        e.preventDefault();
        const query = searchInput.value.trim();
        searchProducts(query);
    })
   
    document.addEventListener('click', (e) => {
        if (!searchInput.contains(e.target) && !searchResults.contains(e.target)) {
            searchResults.style.display = 'none';
        }
    });


    if (sortSelect) {
        sortSelect.addEventListener('change', (e) => {
            e.preventDefault(); 
            const currentPath = window.location.pathname;
            const sortValue = sortSelect.value;
            const searchParams = new URLSearchParams(window.location.search);
            
            // Update sort parameter
            if (sortValue !== 'default') {
                searchParams.set('sort', sortValue);
            } else {
                searchParams.delete('sort');
            }

            // Keep the existing search query if present
            const searchQuery = document.getElementById('searchInput')?.value;
            if (searchQuery) {
                searchParams.set('search', searchQuery);
            }

            // Make AJAX request instead of full page reload
            fetch(`${currentPath}?${searchParams.toString()}`, {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.json())
            .then(data => {
                // Update URL without page reload
                window.history.pushState({}, '', `${currentPath}?${searchParams.toString()}`);
                
                // Update the product grid
                updateProductGrid(data.products);
                
                
                updatePagination(data);
            })
            .catch(error => {
                console.error('Error updating products:', error);
            });
        });
    }

// Function to update product grid
function updateProductGrid(products) {
    const productContainer = document.querySelector('.row.g-2');
    if (!productContainer) return;

  
    productContainer.className = 'row g-2 g-sm-3 g-md-4';
    
 
    productContainer.innerHTML = '';

    
    products.forEach(product => {
        // Only add products with in-stock variants
        const inStockVariants = product.variants?.filter(v => v.stock > 0) || [];
        if (inStockVariants.length > 0) {
            const productHtml = `
                <div class="col-6 col-sm-4 col-lg-3">
                    <div class="product-card">
                        <div class="product-image-container">
                            <button class="heart-btn" data-product-id="${product._id}">
                                <i class="fa-regular fa-heart"></i>
                            </button>
                            <a href="/user/buy?id=${product._id}" class="product-link">
                                ${inStockVariants[0].productImage && inStockVariants[0].productImage.length > 0 
                                    ? `<img src="${inStockVariants[0].productImage[0]}" 
                                           alt="${product.productName}" 
                                           class="img-fluid">`
                                    : `<img src="/images/default-product.jpg" 
                                           alt="No image available" 
                                           class="img-fluid">`
                                }
                            </a>
                        </div>
                        <h3 class="product-title">${product.productName}</h3>
                        <div class="price-section">
                            ${product.discount > 0 
                                ? `<p class="card-text mb-0">
                                    <span class="original-price text-muted text-decoration-line-through">
                                        Rs/-${product.originalPrice}
                                    </span>
                                    <span class="discounted-price ms-2">
                                        Rs/-${product.finalPrice}
                                    </span>
                                   </p>
                                   <div class="offer-badge">
                                       <span class="badge bg-danger">
                                           ${product.discount}% OFF - ${product.offerName}
                                       </span>
                                   </div>`
                                : `<p class="product-price" style="font-weight: bolder;">
                                    Rs/-${product.originalPrice}
                                   </p>`
                            }
                        </div>
                    </div>
                </div>
            `;
            
            productContainer.insertAdjacentHTML('beforeend', productHtml);
        }
    });

}




function updatePagination(data) {
        const paginationContainer = document.querySelector('.pagination-container');
        if (!paginationContainer) return;

        const { currentPage, totalPages, hasNextPage, hasPrevPage } = data;
        
        const paginationHtml = `
            <nav aria-label="Product navigation">
                <ul class="pagination justify-content-center">
                    <li class="page-item ${!hasPrevPage ? 'disabled' : ''}">
                        <a class="page-link" href="?page=1${data.currentSort ? `&sort=${data.currentSort}` : ''}">First</a>
                    </li>
                    <li class="page-item ${!hasPrevPage ? 'disabled' : ''}">
                        <a class="page-link" href="?page=${currentPage - 1}${data.currentSort ? `&sort=${data.currentSort}` : ''}">Previous</a>
                    </li>

                    ${Array.from({length: Math.min(totalPages, 5)}, (_, i) => {
                        const pageNum = Math.max(1, Math.min(totalPages, currentPage - 2 + i));
                        return `
                            <li class="page-item ${currentPage === pageNum ? 'active' : ''}">
                                <a class="page-link" href="?page=${pageNum}${data.currentSort ? `&sort=${data.currentSort}` : ''}">${pageNum}</a>
                            </li>
                        `;
                    }).join('')}

                    <li class="page-item ${!hasNextPage ? 'disabled' : ''}">
                        <a class="page-link" href="?page=${currentPage + 1}${data.currentSort ? `&sort=${data.currentSort}` : ''}">Next</a>
                    </li>
                    <li class="page-item ${!hasNextPage ? 'disabled' : ''}">
                        <a class="page-link" href="?page=${totalPages}${data.currentSort ? `&sort=${data.currentSort}` : ''}">Last</a>
                    </li>
                </ul>
            </nav>

            <div class="text-center mt-3">
                <small class="text-muted">
                    Page ${currentPage} of ${totalPages}
                </small>
            </div>
        `;

        paginationContainer.innerHTML = paginationHtml;
    }
});



// for updating cart counter
   async function updateCartCounter(){
    try {
        const response  = await fetch('/user/cart/count');

        if (!response.ok) {
            throw new Error('Failed to fetch cart count');
        }

        const data = await response.json();
        console.log("cart counter",data )
        const counter = document.getElementById('cartCounter');

        if(counter){
            counter.textContent = data.count || '0';

            counter.style.display = data.count >0 ? "block" : "none";
        }


    } catch (error) {
        console.log("error in cart counter",error.message);
        
    }
   }

   // for updating wishlist counter
     async function updateWishlistCounter() {
      try {
        const response = await fetch('/user/wishlist/count');
        const data = await response.json();

        const wishlistCounter = document.getElementById('wishlist-counter');
        if (wishlistCounter) {
            wishlistCounter.textContent = data.wishlistCount;
            wishlistCounter.style.display = data.wishlistCount > 0 ? 'inline-block' : 'none';
        }


     } catch (error) {
        console.error("Error updating wishlist counter:", error);
     }
 }
// ========   FOR REMOVING SUGGETIONS WHILE CLICKING ON OUTSIDE =========

   document.addEventListener('click', (e) => {
    const searchBox = document.getElementById('searchInput');
    const searchResults = document.getElementById('searchResults');
    
 
    if (!searchBox?.contains(e.target) && !searchResults?.contains(e.target)) {
        if (searchResults) {
            searchResults.style.display = 'none';
        }
    }
});

    </script>