<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BLUR VINTAGE - Change Password</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
    <style>


        .log-out-btn {
            background-color: #212529;
            color: white;
            border: none;
            border-radius: 25px;
            padding: 12px;
            width: 100%;
            margin-top: 2rem;
        }

        /* Password Form Styles */
        .password-form {
            background: white;
            padding: 2rem;
            border-radius: 12px;
        }

        .form-control {
            padding: 12px;
            border-radius: 8px;
            border: 1px solid #ddd;
            margin-bottom: 1.5rem;
        }

        .submit-btn {
            background: #212529;
            color: white;
            border: none;
            padding: 12px 30px;
            border-radius: 8px;
            float: right;
        }

        .submit-btn:hover {
            background: #343a40;
        }

        @media (max-width: 768px) {
            .search-input {
                width: 100%;
            }
            
            .user-sidebar {
                margin-bottom: 2rem;
            }

            .password-form {
                padding: 1rem;
            }
        }
    </style>
</head>
<body>
    <!-- Header -->
   <%-include('../../views/partials/user/header.ejs')%>

    <!-- Main Content -->
    <div class="container">
        <div class="row g-4">
            <!-- Sidebar -->
           <%-include('../../views/partials/user/userSidebar')%>

            <!-- Password Change Form -->
            <div class="col-lg-9">
                <h2 class="mb-5 ">Change your password</h2>
                <div class="password-form">
                    <form>
                        <div class="mb-4">
                            <label class="form-label">Enter your old password</label>
                            <input type="password" name="oldPassword" class="form-control">
                        </div>
                        <div class="mb-4">
                            <label class="form-label">Enter your new password</label>
                            <input type="password" name="newPassword" class="form-control">
                        </div>
                        <div class="mb-4">
                            <label class="form-label">Confirm your new password</label>
                            <input type="password" name="confirmPassword" class="form-control">
                        </div>
                        <button type="submit" class="submit-btn" id="submit">Submit</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Footer -->
  <%-include('../../views/partials/user/footer.ejs')%>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</body>
</html>

<script>
    // Frontend JavaScript for validation and form submission
const passwordForm = document.querySelector('.password-form form');
const oldPassword = document.querySelector('input[type="password"]:nth-of-type(1)');
const newPassword = document.querySelector('input[type="password"]:nth-of-type(2)');
const confirmPassword = document.querySelector('input[type="password"]:nth-of-type(3)');
const submitBtn = document.getElementById("submit");
// Validation messages containers
const createErrorDiv = () => {
    const div = document.createElement('div');
    div.className = 'text-danger mt-1 small';
    return div;
};

// Add validation messages containers after each input
    // [oldPassword, newPassword, confirmPassword].forEach(input => {
    //     const errorDiv = createErrorDiv();
    //     input.parentNode.appendChild(errorDiv);
    // });

// Validation functions
const validatePassword = (password) => {
    const minLength = 8;
    const hasUpperCase = /[A-Z]/.test(password);
    const hasLowerCase = /[a-z]/.test(password);
    const hasNumbers = /\d/.test(password);
    const hasSpecialChar = /[!@#$%^&*(),.?":{}|<>]/.test(password);
    
    if (password.length < minLength) {
        return 'Password must be at least 8 characters long';
    }
    if (!hasUpperCase || !hasLowerCase) {
        return 'Password must contain both uppercase and lowercase letters';
    }
    if (!hasNumbers) {
        return 'Password must contain at least one number';
    }
    if (!hasSpecialChar) {
        return 'Password must contain at least one special character';
    }
    return '';
};

// Real-time validation
// newPassword.addEventListener('input', () => {
//     const errorDiv = newPassword.parentNode.querySelector('.text-danger');
//     const error = validatePassword(newPassword.value);
//     errorDiv.textContent = error;
// });

// confirmPassword.addEventListener('input', () => {
//     const errorDiv = confirmPassword.parentNode.querySelector('.text-danger');
//     if (confirmPassword.value !== newPassword.value) {
//         errorDiv.textContent = 'Passwords do not match';
//     } else {
//         errorDiv.textContent = '';
//     }
// });

// Form submission
submitBtn.addEventListener('click', async (e) => {
    e.preventDefault();
    
    // Clear all previous error messages
    document.querySelectorAll('.text-danger').forEach(div => div.textContent = '');
    
    // Validate all fields
    let hasErrors = false;
    
    if (!oldPassword.value) {
        oldPassword.parentNode.querySelector('.text-danger').textContent = 'Please enter your current password';
        hasErrors = true;
    }
    
    const newPasswordError = validatePassword(newPassword.value);
    if (newPasswordError) {
        newPassword.parentNode.querySelector('.text-danger').textContent = newPasswordError;
        hasErrors = true;
    }
    
    if (newPassword.value !== confirmPassword.value) {
        confirmPassword.parentNode.querySelector('.text-danger').textContent = 'Passwords do not match';
        hasErrors = true;
    }
    
    if (hasErrors) return;
    
    try {
    const response = await fetch('/user/update-password', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            oldPassword: oldPassword.value,
            newPassword: newPassword.value
        })
    });
    
    const data = await response.json();
    console.log('Response:', data); // Add this log
    
    if (response.ok) {
        Swal.fire({
            icon: "success",
            title: data.message
        });
        
        passwordForm.reset();
    } else {
        Swal.fire({
            icon: "error",
            title: data.message || 'Failed to update password'
        });
    }
} catch (error) {
    console.error('Error:', error);
    Swal.fire({
        icon: "error",
        title: 'An error occurred. Please try again later.'
    });
}
}); 
</script>