    <!-- views/user/orderDetails.ejs -->
    <!DOCTYPE html>
    <html lang="en">
      <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Order Details</title>
        <link
          href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;700&display=swap"
          rel="stylesheet"
        />
        <link
          rel="stylesheet"
          href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
        />
        <style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }
          .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            margin-top: 20px;
            gap: 15px;
          }

          .pagination a {
            text-decoration: none;
            padding: 8px 16px;
            border: 1px solid #ddd;
            border-radius: 4px;
            color: #007bff;
          }

          .pagination a:hover {
            background-color: #f1f1f1;
          }
          body {
            font-family: "Roboto", sans-serif;
            background-color: #f5f5f5;
            color: #333;
          }

          .container {
            max-width: 1200px;
            margin: 20px auto;
            padding: 0 20px;
          }

          .order-card {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
            padding: 20px;
          }

          .order-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid #eee;
            padding-bottom: 15px;
            margin-bottom: 20px;
          }

          .order-number {
            font-size: 1.2rem;
            font-weight: bold;
          }

          .order-status {
            padding: 5px 10px;
            border-radius: 4px;
            font-weight: 500;
          }

          .status-Processing {
            background: #fff3cd;
            color: #856404;
          }
          .status-Shipped {
            background: #cce5ff;
            color: #004085;
          }
          .status-Delivered {
            background: #d4edda;
            color: #155724;
          }
          .status-Cancelled {
            background: #f8d7da;
            color: #721c24;
          }

          .order-info-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
          }

          .info-section {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 4px;
          }

          .info-section h3 {
            margin-bottom: 10px;
            color: #333;
          }

          .product-list {
            margin-top: 20px;
          }

          .product-item {
            display: grid;
            grid-template-columns: auto 1fr auto;
            gap: 20px;
            padding: 15px;
            border: 1px solid #eee;
            border-radius: 4px;
            margin-bottom: 10px;
          }

          .product-image {
            width: 100px;
            height: 100px;
            object-fit: cover;
            border-radius: 4px;
          }

          .product-details {
            display: flex;
            flex-direction: column;
            justify-content: center;
          }

          .price-details {
            text-align: right;
            display: flex;
            flex-direction: column;
            justify-content: center;
          }

          .original-price {
            text-decoration: line-through;
            color: #666;
          }

          .discounted-price {
            font-weight: bold;
            font-size: 1.1rem;
          }

          .product-offer {
            color: #28a745;
            font-size: 0.9rem;
          }

          .order-summary {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 4px;
            margin-top: 20px;
          }

          .total-amount {
            font-size: 1.2rem;
            font-weight: bold;
            text-align: right;
            margin-top: 10px;
            padding-top: 10px;
            border-top: 1px solid #ddd;
          }

          @media (max-width: 768px) {
            .product-item {
              grid-template-columns: 1fr;
              text-align: center;
            }

            .product-image {
              margin: 0 auto;
            }

            .price-details {
              text-align: center;
            }
          }




          body {
              display: flex;
              min-height: 100vh;
              margin: 0;
          }
          .sidebar {
              width: 250px;
              background-color: #2c3e50;
              color: #ecf0f1;
              padding: 20px;
              transition: all 0.3s;
          }
          .sidebar-header {
              text-align: center;
              padding-bottom: 20px;
              border-bottom: 1px solid #34495e;
          }
          .sidebar-header img {
              width: 80px;
              height: 80px;
              border-radius: 50%;
              margin-bottom: 10px;
          }
          .sidebar-menu {
              list-style-type: none;
              padding: 0;
              margin-top: 20px;
          }
          .sidebar-menu li {
              margin-bottom: 10px;
          }
          .sidebar-menu a {
              color: #ecf0f1;
              text-decoration: none;
              display: flex;
              align-items: center;
              padding: 10px;
              border-radius: 5px;
              transition: background-color 0.3s;
          }
          .sidebar-menu a:hover, .sidebar-menu a.active {
              background-color: #34495e;
          }
          .sidebar-menu i {
              margin-right: 10px;
          }
          .main-content {
              flex-grow: 1;
              padding: 20px;
              transition: margin-left 0.3s;
          }
          .menu-toggle {
              display: none;
              position: fixed;
              top: 20px;
              left: 20px;
              z-index: 1000;
              background-color: #2c3e50;
              color: #ecf0f1;
              border: none;
              padding: 10px;
              cursor: pointer;
          }
          @media (max-width: 768px) {
              .sidebar {
                  position: fixed;
                  left: -250px;
                  height: 100%;
                  z-index: 999;
              }
              .sidebar.active {
                  left: 0;
              }
              .main-content {
                  margin-left: 0;
              }
              .menu-toggle {
                  display: block;
              }
          }
        </style>
      </head>
      <body>


        <div class="sidebar">
        
          <ul class="sidebar-menu">
            <li><a href="/user/manage"><i class="fas fa-home"></i> Dashboard</a></li>
            <li><a href="/user/order-details" class="active"><i class="fas fa-shopping-bag"></i> Orders</a></li>
            <li><a href="/user/wishlist"><i class="fas fa-heart"></i> Wishlist</a></li>
            <li><a href="/user/address"><i class="fas fa-map-marker-alt"></i> Addresses</a></li>
              <li><a href="/logout"><i class="fas fa-sign-out-alt"></i> Logout</a></li>
        </ul>
          </div>
      <div class="main-content">
        <div class="container">
          <% if (!orders || orders.length === 0) { %>
            <!-- Your existing "No Orders Found" section -->
            <div class="order-card" style="text-align: center; padding: 40px; margin-top: 100px">
              <i class="fas fa-shopping-bag" style="font-size: 48px; color: #ccc; margin-bottom: 20px"></i>
              <h2>No Orders Found</h2>
              <p>You haven't placed any orders yet.</p>
              <a href="/user/shop" style="display: inline-block; margin-top: 20px; padding: 10px 20px; background-color: #007bff; color: white; text-decoration: none; border-radius: 4px;">
                Start Shopping
              </a>
            </div>
          <% } else { %>
            <% orders.forEach(order => { %>
              <div class="order-card">
                <div class="order-header">
                  <div class="order-number">Order #<%= order.orderNumber %></div>
                  <div class="order-status status-<%= order.orderStatus %>">
                    <%= order.orderStatus %>
                  </div>
                </div>
    
                <!-- Cancel Order Button -->
                <div class="order-header">
                  <% if (order.orderStatus !== 'Cancelled' && order.orderStatus !== 'Delivered' && order.orderStatus !== 'Returned') { %>
                    <button class="cancel-order-btn" 
                      style="background-color: #dc3545; color: white; padding: 8px 16px; border: none; border-radius: 4px; cursor: pointer;"
                      onclick="cancelAllOrders('<%=order._id%>')">
                      Cancel Order
                    </button>
                  <% } %>
                </div>


            
                  <div class="invoice-section">
                    <% if (order.orderStatus === 'Delivered' && 
                        (order.payment.status === 'Successful' || 
                        (order.payment.method === 'COD' && order.payment.status === 'Completed' || order.payment.method === "Razorpay" && order.payment.status === "Completed"))) { %>
                        
                        <div style="display: flex; align-items: center; justify-content: space-between;">
                            <div>
                                <h4 style="margin: 0 0 5px 0;">Invoice</h4>
                                <span class="invoice-badge">
                                    <i class="fas fa-check-circle" style="color: #28a745;"></i> 
                                    Available for download
                                </span>
                            </div>
                            <button 
                                onclick="downloadInvoice('<%= order._id %>')" 
                                class="invoice-button">
                                <i class="fas fa-file-download"></i>
                                Download Invoice
                            </button>
                        </div>
                        
                    <% } else { %>
                        <div style="display: flex; align-items: center; justify-content: space-between;">
                            <div>
                                <h4 style="margin: 0 0 5px 0;">Invoice</h4>
                                <span class="invoice-badge">
                                    <i class="fas fa-clock" style="color: #6c757d;"></i>
                                    <% if (order.orderStatus !== 'Delivered') { %>
                                        Available after delivery
                                    <% } else { %>
                                        Waiting for payment confirmation
                                    <% } %>
                                </span>
                            </div>
                            <button 
                                class="invoice-button disabled" 
                                disabled>
                                <i class="fas fa-file-download"></i>
                                Download Invoice
                            </button>
                        </div>
                    <% } %>
                  </div>

                <% if (order.orderStatus !== 'Cancelled') { %>
                  <div class="payment-status-section" style="margin: 15px 0;">
                    <% if (order.payment.status === 'Failed') { %>
                      <div class="alert alert-danger" style="background-color: #f8d7da; color: #721c24; padding: 10px; border-radius: 4px; margin-bottom: 10px;">
                        Payment Failed
                      </div>
                      <button 
                        class="retry-payment-btn"
                        onclick="retryPayment('<%= order._id %>', <%= order.pricing.finalAmount %>)"
                        style="background-color: #28a745; color: white; padding: 8px 16px; border: none; border-radius: 4px; cursor: pointer;">
                        Retry Payment
                      </button>
                    <% } %>
                  </div>
                <% } %>
    
                <!-- Order Information -->
                <div class="order-info-grid">
                  <!-- Order Info Section -->
                  <div class="info-section">
                    <h3>Order Information</h3>
                    <p><strong>Order Date:</strong> <%= new Date(order.createdAt).toLocaleDateString() %></p>
                    <% if (order.expectedDeliveryDate) { %>
                      <p><strong>Expected Delivery:</strong> <%= new Date(order.expectedDeliveryDate).toLocaleDateString() %></p>
                    <% } %>
                    <p><strong>Payment Method:</strong> <%= order.payment.method %></p>
                    <p><strong>Payment Status:</strong> <%= order.payment.status %></p>
                  </div>
    
                  <!-- Shipping Address -->
                  <div class="info-section">
                    <h3>Shipping Address</h3>
                    <p><%= order.shippingAddress.name %></p>
                    <p><%= order.shippingAddress.landMark %></p>
                    <p><%= order.shippingAddress.city %>, <%= order.shippingAddress.state %></p>
                    <p><%= order.shippingAddress.country %> - <%= order.shippingAddress.pincode %></p>
                    <p>Phone: <%= order.shippingAddress.phone %></p>
                  </div>
                </div>
    
                <!-- Product List -->
                <div class="product-list">
                  <h3>Ordered Items</h3>
                  <% order.orderItems.forEach(item => { %>
                    <div class="product-item">
                      <!-- Product Image -->
                      <img src="<%= item.variant.productImage %>" alt="Product" class="product-image" />
                      
                      <!-- Product Details -->
                      <div class="product-details">
                        <h4><%= item.product.productName %></h4>
                        <p>Color: <%= item.variant.colorName %></p>
                        <p>Size: <%= item.variant.size %></p>
                        <p>Quantity: <%= item.quantity %></p>
    
                        <!-- Item Status -->
                          <%if(order.payment.status === "Failed"){%>
                              <p class="status-Cancelled" style="color: #dc3545; font-weight: bold; text-align: center">
                              payment Cancelled
                              </p>
                            <%}else if(item.status.itemStatus === "Cancelled"){%>
                                <p class="status-Cancelled" style="color: #dc3545; font-weight: bold; text-align: center">
                                cancelled
                                </p>
                        <% } else if (item.status.return && item.status.return.requested) { %>
                          <p class="return-status">
                            Return status: <%= item.status.return.status %>
                          </p>
                        <% } else if (order.orderStatus !== 'Cancelled' && order.orderStatus !== 'Delivered' && order.orderStatus !== "Returned") { %>
                          <button class="cancel-item-btn"
                            onclick="confirmCancelItem('<%= order._id %>', '<%= item._id %>')"
                            style="background-color: #dc3545; color: white; padding: 4px 12px; border: none; border-radius: 4px; cursor: pointer; margin-top: 10px; font-size: 0.9rem;">
                            Cancel This Item
                          </button>
                        <% } %>
    
                       
                        <% if (order.orderStatus === 'Delivered' && item.status.itemStatus !== 'Cancelled' ) { %>
                          <% if (item.status.return && item.status.return.requested) { %>
                            <p class="return-status" style="color: #007bff; font-weight: bold; margin-top: 10px; text-align: center;">
                              Item returned: <%= item.status.return.status %>
                            </p>
                          <% } else { %>
                            <button class="return-item-btn"
                              onclick="initiateReturn('<%= order._id %>', '<%= item._id %>')"
                              style="background-color: #28a745; color: white; padding: 4px 12px; border: none; border-radius: 4px; cursor: pointer; margin-top: 10px; font-size: 0.9rem;">
                              Return Item
                            </button>
                          <% } %>
                        <% } %>
                      </div>
    
                      <!-- Price Details -->
                      <div class="price-details">
                        <% if (item.price.originalPrice !== item.price.discountedPrice) { %>
                          <div class="price-row">
                            <span class="price-label">Original Price:</span>
                            <span class="original-price">₹<%= item.price.originalPrice.toFixed(2) %></span>
                          </div>
                        <% } %>
    
                        <% if (item.price.productOffer > 0) { %>
                          <div class="price-row">
                            <span class="product-offer"><%= item.price.offerType %>: <%= item.price.productOffer %>% off</span>
                          </div>
                        <% } %>
    
                        <div class="price-row">
                          <span class="price-label">Price after discount:</span>
                          <span class="discounted-price">₹<%= item.price.discountedPrice.toFixed(2) %></span>
                        </div>
    
                        <div class="price-row" style="border-top: 1px solid #ddd; padding-top: 5px; margin-top: 5px;">
                          <span class="quantity-total">
                            <span class="price-label">Total:</span>
                            <%= item.quantity %> × ₹<%= item.price.discountedPrice.toFixed(2) %> = 
                            ₹<%= (item.price.discountedPrice * item.quantity).toFixed(2) %>
                          </span>
                        </div>
                      </div>
                    </div>
                  <% }); %>
                </div>
    
                <!-- Order Summary -->
                <div class="order-summary">
                  <h3>Order Summary</h3>
                  
                  <div class="summary-row">
                    <strong>Items Total (Original):</strong>
                    <span>₹<%= order.orderItems.reduce((total, item) => 
                      total + (item.price.originalPrice * item.quantity), 0).toFixed(2) %></span>
                  </div>
    
                  <% if (order.pricing.productOffersTotal > 0) { %>
                    <div class="summary-row discount">
                      <strong>Product/Category Offers:</strong>
                      <span>-₹<%= order.pricing.productOffersTotal.toFixed(2) %></span>
                    </div>
                  <% } %>
    
                  <div class="summary-row">
                    <strong>Subtotal (after offers):</strong>
                    <span>₹<%= order.pricing.subtotal.toFixed(2) %></span>
                  </div>
    
                  <% if (order.pricing.coupon && order.pricing.coupon.discount > 0) { %>
                    <div class="summary-row discount">
                      <strong>Coupon Discount (<%= order.pricing.coupon.code %>):</strong>
                      <span>-₹<%= order.pricing.coupon.discount.toFixed(2) %></span>
                    </div>
                  <% } %>
    
                  <div class="total-amount">
                    <strong>Final Amount:</strong>
                    <span>₹<%= order.pricing.finalAmount.toFixed(2) %></span>
                  </div>
                </div>
              </div>
            <% }); %>
          <% } %>
        </div>
    
        <!-- Pagination -->
        <div class="pagination">
          <% if (hasPrevPage) { %>
            <a href="?page=<%= currentPage - 1 %>" class="prev-page">Previous</a>
          <% } %>
          <span>Page <%= currentPage %> of <%= totalPages %></span>
          <% if (hasNextPage) { %>
            <a href="?page=<%= currentPage + 1 %>" class="next-page">Next</a>
          <% } %>
        </div>
      </div>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
      </body>
    </html>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
      // function for cancelling orders one by one
      function confirmCancelItem(orderId, itemId) {
  Swal.fire({
    title: "Cancel this item",
    html: `
      <div class="mb-4">
        <select id="cancelReason" class="swal2-select w-full mb-3">
          <option value="">Select a reason</option>
          <option value="Changed my mind">Changed my mind</option>
          <option value="Found better price">Found better price elsewhere</option>
          <option value="Shipping time too long">Shipping time too long</option>
          <option value="Ordered by mistake">Ordered by mistake</option>
          <option value="Payment issues">Payment issues</option>
          <option value="Other">Other reason</option>
        </select>
        <textarea id="additionalDetails" 
          class="swal2-textarea" 
          placeholder="Additional details (optional)"
          style="display: none;"
        ></textarea>
      </div>
    `,
    showCancelButton: true,
    confirmButtonColor: "#3085d6",
    cancelButtonColor: "#d33",
    confirmButtonText: "Yes, cancel it!",
    didOpen: () => {
      const reasonSelect = document.getElementById('cancelReason');
      const additionalDetails = document.getElementById('additionalDetails');
      
      reasonSelect.addEventListener('change', (e) => {
        if (e.target.value === 'Other') {
          additionalDetails.style.display = 'block';
        } else {
          additionalDetails.style.display = 'none';
        }
      });
    },
    preConfirm: () => {
      const reason = document.getElementById('cancelReason').value;
      const message = document.getElementById('additionalDetails').value;
      
      if (!reason) {
        Swal.showValidationMessage('Please select a reason');
        return false;
      }
      
      return {
        reason,
        message: reason === 'Other' ? message : ''
      };
    }
  }).then((result) => {
    if (result.isConfirmed) {
      cancelOrder(orderId, itemId, result.value);
    }
  });
}

      // for cancelling orders one by one
      async function cancelOrder(orderId, itemId,  { reason, message }) {
        try {
          const response = await fetch(
            `/user/cancel-order-item/${orderId}/${itemId}`,
            {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({reason,message}),
            }
          );

          const data = await response.json();

          if (data.success) {
            Swal.fire({
              icon: "success",
              title: "Cancelled",
              text: "order cancelled successfully",
              showConfirmButton: false,
              timer: 1500,
            }).then(() => {
              window.location.reload();
            });
          } else {
            Swal.fire({
              icon: "error",
              title: "failed to cancel",
              text: data.message,
            });
          }
        } catch (error) {
          Swal.fire("Error!", error.message);
        }
      }

      function cancelAllOrders(orderId) {
  Swal.fire({
    title: "Cancel this order",
    html: `
      <div class="mb-4">
        <select id="cancelReason" class="swal2-select w-full mb-3">
          <option value="">Select a reason</option>
          <option value="Changed my mind">Changed my mind</option>
          <option value="Found better price">Found better price elsewhere</option>
          <option value="Shipping time too long">Shipping time too long</option>
          <option value="Ordered by mistake">Ordered by mistake</option>
          <option value="Payment issues">Payment issues</option>
          <option value="Other">Other reason</option>
        </select>
        <textarea id="additionalDetails" 
          class="swal2-textarea" 
          placeholder="Additional details (optional)"
          style="display: none;"
        ></textarea>
      </div>
    `,
    showCancelButton: true,
    confirmButtonColor: "#3085d6",
    cancelButtonColor: "#d33",
    confirmButtonText: "Yes, cancel it!",
    didOpen: () => {
      const reasonSelect = document.getElementById('cancelReason');
      const additionalDetails = document.getElementById('additionalDetails');
      
      reasonSelect.addEventListener('change', (e) => {
        if (e.target.value === 'Other') {
          additionalDetails.style.display = 'block';
        } else {
          additionalDetails.style.display = 'none';
        }
      });
    },
    preConfirm: () => {
      const reason = document.getElementById('cancelReason').value;
      const message = document.getElementById('additionalDetails').value;
      
      if (!reason) {
        Swal.showValidationMessage('Please select a reason');
        return false;
      }
      
      return {
        reason,
        message: reason === 'Other' ? message : ''
      };
    }
  }).then((result) => {
    if (result.isConfirmed) {
      cancelAll(orderId, result.value);
    }
  });
}


      async function cancelAll(orderId,  { reason, message }) {
        try {
          const response = await fetch(`/user/cancel-all/${orderId}`, {
            method: "post",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({reason,message}),
          });

          const result = await response.json();

          if (result.success) {
            Swal.fire({
              icon: "success",
              title: result.message,
              timer: 1500,
            }).then(() => {
              window.location.reload();
            });
          } else {
            Swal.fire({
              icon: "error",
              title: result.message,
            });
          }
        } catch (error) {
          console.log("error in cancel all orders fetch", error.message);
        }
      } 

      // ====function to return the order=========

      function initiateReturn(orderId, itemId) {
        Swal.fire({
          title: "Return Item",
          text: "Select a reason for return",
          input: "select",
          inputOptions: {
            defective: "Defective Product",
            wrong: "Wrong Product",
            damaged: "Product Damaged",
            size: "Size/Fit Issue",
            other: "Other Reasons",
          },
          inputPlaceholder: "Select a reason",
          showCancelButton: true,
          confirmButtonText: "Proceed Return",
          inputValidator: (value) => {
            if (!value) {
              return "You need to select a reason";
            }
          },
        }).then((result) => {
          if (result.isConfirmed) {
            processReturn(orderId, itemId, result.value);
          }
        });
      }

      async function processReturn(orderId, itemId, reason) {
        try {
          const response = await fetch(
            `/admin/return-order-item/${orderId}/${itemId}`,
            {
              method: "post",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ reason }),
            }
          );
          const data = await response.json();

          if (data.success) {
            swal
              .fire({
                icon: "success",
                title: "Return Initiated",
                text: "your request has been submitted",
                showConfirmButton: false,
                timer: 1500,
              })
              .then(() => {
                window.location.reload();
              });
          } else {
            Swal.fire({
              icon: "error",
              title: "return failed",
              text: data.message,
            });
          }
        } catch (error) {
          console.log("error in return fetch", error.message);
        }
      }



        // for return payment

        async function retryPayment(orderId, amount) {
      try {
          const response = await fetch(`/user/retry-payment/${orderId}`, {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json'
              }
          });

          const data = await response.json();

          if (!data.success) {
              throw new Error(data.message);
          }

          const options = {
              key: data.razorpayKeyId,
              amount: data.amount,
              currency: "INR",
              name: "BLUR VINTAGE ⭐",
              description: `Payment retry for order ${data.orderNumber}`,
              order_id: data.razorpayOrderId,
              handler: async function (response) {
                  try {
                      const verificationResponse = await fetch('/user/retry-payment-verification', {
                          method: 'POST',
                          headers: {
                              'Content-Type': 'application/json'
                          },
                          body: JSON.stringify({
                              razorpay_order_id: response.razorpay_order_id,
                              razorpay_payment_id: response.razorpay_payment_id,
                              razorpay_signature: response.razorpay_signature
                          })
                      });

                      const verificationData = await verificationResponse.json();

                      if (verificationData.success) {
                          Swal.fire({
                              icon: 'success',
                              title: 'Payment Successful',
                              text: 'Your payment has been processed successfully',
                              showConfirmButton: false,
                              timer: 1500
                          }).then(() => {
                              window.location.reload();
                          });
                      } else {
                          throw new Error(verificationData.message);
                      }
                  } catch (error) {
                      Swal.fire({
                          icon: 'error',
                          title: 'Payment Verification Failed',
                          text: error.message
                      });
                  }
              },
              prefill: {
                  name: data.customerName,
                  email: data.customerEmail,
                  contact: data.customerPhone
              },
              theme: {
                  color: "#3399cc"
              }
          };

          const rzp = new Razorpay(options);
          rzp.open();

          rzp.on('payment.failed', function (response) {
              Swal.fire({
                  icon: 'error',
                  title: 'Payment Failed',
                  text: response.error.description
              });
          });

      } catch (error) {
          Swal.fire({
              icon: 'error',
              title: 'Error',
              text: error.message || 'Failed to initiate payment'
          });
      }
  }




  function downloadInvoice(orderId) {
    Swal.fire({
        title: 'Downloading Invoice...',
        text: 'Please wait while we generate your invoice',
        allowOutsideClick: false,
        didOpen: () => {
            Swal.showLoading();
        }
    });
    const iframe = document.createElement('iframe');
    iframe.style.display = 'none';
    iframe.src = `/user/download-invoice/${orderId}`;
    document.body.appendChild(iframe);

   
    iframe.onload = function() {
        document.body.removeChild(iframe);
        Swal.fire({
            icon: 'success',
            title: 'Invoice Downloaded',
            text: 'Your invoice has been downloaded successfully',
            timer: 2000,
            showConfirmButton: false
        });
    };

    iframe.onerror = function() {
        document.body.removeChild(iframe);
        Swal.fire({
            icon: 'error',
            title: 'Download Failed',
            text: 'Failed to download invoice. Please try again.'
        });
    };
  }

    </script>
