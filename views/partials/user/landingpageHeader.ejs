<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BLUR VINTAGE ★ AAA</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.2/font/bootstrap-icons.css">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

    <style>
        .search-result-item {
            padding: 10px 15px;
            border-bottom: 1px solid #eee;
            cursor: pointer;
        }

        .input-group {
            position: relative;
            width: 400px;
        }

        .input-group .form-control:focus {
            border-color: #212529;
            box-shadow: none;
        }

        .input-group .btn-outline-dark:hover {
            background-color: #212529;
            color: white;
        }

        .search-result-item:hover {
            background-color: #f8f9fa;
        }

        .search-result-item img {
            width: 50px;
            height: 50px;
            object-fit: cover;
        }

        .search-result-info {
            flex: 1;
        }

        .search-result-name {
            font-weight: 600;
            margin-bottom: 5px;
            font-size: 1rem;
        }

        .search-result-price {
            color: #666;
            font-size: 0.95rem;
        }

        .form-select-sm {
            padding-right: 2rem;
            background-color: white;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            font-size: 1rem;
            padding: 10px;
        }

        .form-select-sm:focus {
            border-color: black;
            box-shadow: none;
        }

        .navbar-brand {
            font-family: 'Joan', serif;
            font-size: 25px;
        }

        .search-container {
            position: relative;
            width: 100%;
            max-width: 400px;
        }

        .search-input {
            border-radius: 20px;
            padding-right: 40px;
        }

        .search-button {
            position: absolute;
            right: 5px;
            top: 50%;
            transform: translateY(-50%);
            border: none;
            background: none;
        }

        .nav-link {
            font-size: 1.1rem;
            padding: 0.5rem 1rem;
        }

        #searchSuggestions {
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            background-color: white;
            border: 1px solid #ddd;
            border-radius: 0 0 20px 20px;
            z-index: 1000;
            max-height: 300px;
            overflow-y: auto;
        }

        /* Icons and badge styles */
        .icon-link {
            text-decoration: none;
            color: #212529;
            position: relative;
            padding: 0.5rem;
        }

        .icon-link:hover {
            color: #0d6efd;
        }

        .badge-counter {
            position: absolute;
            top: -5px;
            right: -5px;
            font-size: 0.75rem;
            padding: 0.25em 0.6em;
        }

        /* Responsive styles */
        @media (max-width: 991px) {
            .navbar-collapse {
                position: fixed;
                top: 0;
                left: -100%;
                width: 80%;
                max-width: 300px;
                height: 100vh;
                background-color: #f8f9fa;
                transition: left 0.3s ease;
                z-index: 1050;
                padding: 1rem;
                overflow-y: auto;
            }

            .navbar-collapse.show {
                left: 0;
            }

            .navbar-nav {
                flex-direction: column;
            }

            .navbar-nav .nav-link {
                padding: 0.5rem 0;
            }

            .search-container {
                margin-bottom: 1rem;
                width: 100%;
            }

            .icon-group {
                margin-top: 1rem;
                justify-content: center;
            }
        }
    </style>
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-lg navbar-light bg-light">
            <div class="container">
                <a class="navbar-brand" href="/user/home">BLUR VINTAGE ★</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarContent">
                    <span class="navbar-toggler-icon"></span>
                </button>
                
                <div class="collapse navbar-collapse" id="navbarContent">
                    <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                        <li class="nav-item">
                            <a class="nav-link" href="/user/aboutus">About Us</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/user/shop">Shop</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/user/men">Men</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/user/women">Women</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/user/kids">Kids</a>
                        </li>
                    </ul>
                    
                    <div class="search-container mb-3 mb-lg-0 me-lg-3">
                        <form id="searchForm" role="search" method="GET">
                            <input class="form-control search-input" type="search" placeholder="Search products..." aria-label="Search" name="search" id="searchInput">
                            <button class="search-button" type="submit">
                                <i class="bi bi-search"></i>
                            </button>
                        </form>
                        <div id="searchSuggestions" class="d-none"></div>
                    </div>
                    
                    <div class="d-flex align-items-center">
                        <% if (typeof user !== 'undefined' && user) { %>
                            <div class="d-flex align-items-center gap-3">
                                <a href="/user/wishlist" class="icon-link">
                                    <i class="bi bi-heart fs-5"></i>
                                    <span id="wishlist-counter" class="badge bg-danger badge-counter" style="display: none;">0</span>
                                </a>
                                <a href="/user/cart" class="icon-link">
                                    <i class="bi bi-cart fs-5"></i>
                                    <span id="cartCounter" class="badge bg-danger badge-counter" style="display: none;">0</span>
                                </a>
                                <div class="dropdown">
                                    <a href="#" class="icon-link" role="button" id="userDropdown" data-bs-toggle="dropdown">
                                        <i class="bi bi-person-circle fs-5"></i>
                                    </a>
                                    <ul class="dropdown-menu dropdown-menu-end">
                                        <li><a class="dropdown-item" href="/user/profile">Profile</a></li>
                                        <li><a class="dropdown-item" href="/user/orders">Orders</a></li>
                                        <li><hr class="dropdown-divider"></li>
                                        <li><a class="dropdown-item" href="#" onclick="handleLogout(event)">Logout</a></li>
                                    </ul>
                                </div>
                            </div>
                        <% } else { %>
                            <a class="btn btn-outline-dark me-2" href="/user/login">Login</a>
                            <a class="btn btn-dark" href="/user/register">Signup</a>
                        <% } %>
                    </div>
                </div>
            </div>
        </nav>
        
        <div class="container mt-3">
            <div class="row">
                <div class="col-12 d-flex justify-content-end">
                    <select id="sortSelect" class="form-select form-select-sm" style="width: auto;">
                        <option value="default" disabled selected>Sort By</option>
                        <option value="price-high-low">Price: High to Low</option>
                        <option value="price-low-high">Price: Low to High</option>
                        <option value="name-a-z">Name: A to Z</option>
                        <option value="name-z-a">Name: Z to A</option>
                        <option value="new-arrivals">New Arrivals</option>
                    </select>
                </div>
            </div>
        </div>
    </header>
    </body>
        <!-- header ends -->
        <script>

function attachWishlistListeners() {
    const heartBtns = document.querySelectorAll('.heart-btn');
    
    heartBtns.forEach((button) => {
        // Remove existing event listeners to prevent duplicates
        button.replaceWith(button.cloneNode(true));
        const newButton = document.querySelector(`[data-product-id="${button.dataset.productId}"]`);
        
        newButton.addEventListener("click", async function(e) {
            e.preventDefault();
            const productId = this.dataset.productId;
            const heartIcon = this.querySelector('i');

            try {
                const response = await fetch('/user/wishlist/add', {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({ productId })
                });
                
                const data = await response.json();
                
                if(data.success) {
                    heartIcon.classList.remove('fa-regular');
                    heartIcon.classList.add('fa-solid');
                    heartIcon.style.color = "#ff0000";
                    showNotification("Added to wishlist", "success");
                    updateWishlistCounter();
                } else {
                    if(data.message === "Product already in wishlist") {
                        showNotification('Product is already in your wishlist', 'info');
                    } else {
                        showNotification('Failed to add to wishlist', 'error');
                    }
                }
            } catch (error) {
                console.error("Error adding to wishlist:", error);
                showNotification('Error adding to wishlist', 'error');
            }
        });
    });
}



function showNotification(message, type) {
                   // Create notification element
              const notification = document.createElement('div');
               notification.className = `alert alert-${type === 'success' ? 'success' : 
                    type === 'error' ? 'danger' : 
                    'info'} position-fixed`;
                   notification.style.cssText = `
                    top: 20px;
                  right: 20px;
                 z-index: 1000;
                animation: fadeIn 0.5s, fadeOut 0.5s 2.5s;
              `;
    
              notification.textContent = message;
    
   
           document.body.appendChild(notification);
    
  
      setTimeout(() => {
        notification.remove();
       }, 3000);
}

document.addEventListener('DOMContentLoaded', function() {

    attachWishlistListeners();
    updateCartCounter();
    updateWishlistCounter()
    
    const productsGrid = document.querySelector('.row.g-2.g-sm-3.g-md-4');
    const paginationContainer = document.querySelector('.pagination-container');
    const searchInput = document.getElementById("searchInput");
    const searchForm = document.getElementById('searchForm');
    const searchSuggestions = document.getElementById('searchSuggestions');
    let currentPath = window.location.pathname;

    function getCategory() {
        switch(currentPath) {
            case '/user/men':
                return 'men';
            case '/user/women':
                return 'women';
            case '/user/kids':
                return 'kids';
            default:
                return '';
        }
    }


    searchForm.action = currentPath;



    function getCurrentPageContext() {
        const path = window.location.pathname;
        if (path.includes('/men')) return 'men';
        if (path.includes('/women')) return 'women';
        if (path.includes('/kids')) return 'kids';
        if (path.includes('/shop')) return 'shop';
        return '';
    }

  


    function formatPrice(price) {
        return `Rs/-${price.toLocaleString()}`;
    } 



    function createSearchSuggestionItem(product) {
        const displayPrice = product.discount > 0 
            ? `<span class="search-result-price">
                <span class="text-decoration-line-through text-muted">${formatPrice(product.originalPrice)}</span>
                <span class="ms-2">${formatPrice(product.finalPrice)}</span>
               </span>`
            : `<span class="search-result-price">${formatPrice(product.originalPrice)}</span>`;

        return `
            <div class="search-result-item" data-product-id="${product._id}">
                <img src="${product.variants[0]?.productImage?.[0] || '/images/default-product.jpg'}" 
                     alt="${escapeHtml(product.productName)}" 
                     class="search-result-image">
                <div class="search-result-info">
                    <div class="search-result-name">${escapeHtml(product.productName)}</div>
                    ${displayPrice}
                    ${product.discount > 0 
                        ? `<span class="badge bg-danger ms-2">${product.discount}% OFF</span>` 
                        : ''}
                </div>
            </div>`;
    }



    async function handleSearchSuggestions(query) {
    if (!query.trim() || query.length < 2) {
        searchSuggestions.classList.add('d-none');
        return;
    }

    try {
        const category = getCategory();
        const response = await fetch(`/user/search?q=${encodeURIComponent(query)}&suggest=true&category=${category}`);
        const data = await response.json();

        if (data.suggestions && data.suggestions.length > 0) {
            const suggestionsHTML = data.suggestions.map(product => `
                <div class="search-result-item" data-product-id="${product._id}">
                    <img src="${product.variants[0]?.productImage?.[0] || '/images/default-product.jpg'}" 
                         alt="${product.productName}" 
                         class="search-result-image">
                    <div class="search-result-info">
                        <div class="search-result-name">${product.productName}</div>
                        <div class="search-result-price">Rs/-${product.variants[0]?.price || 0}</div>
                    </div>
                </div>
            `).join('');

    
            
            
            searchSuggestions.innerHTML = suggestionsHTML;
            searchSuggestions.classList.remove('d-none');

            document.querySelectorAll('.search-result-item').forEach(item => {
                item.addEventListener('click', () => {
                    window.location.href = `/user/buy?id=${item.dataset.productId}`;
                });
            });
        } else {
            searchSuggestions.innerHTML = '<div class="p-3 text-muted">No products found</div>';
            searchSuggestions.classList.remove('d-none');
        }
    } catch (error) {
        console.error('Error fetching search suggestions:', error);
    }
}


async function performSearch(query, sort = 'default', page = 1) {
    try {
        const currentPath = window.location.pathname;
        const url = new URL(window.location.href);
        
       
        url.searchParams.set('search', query);
        if (sort !== 'default') {
            url.searchParams.set('sort', sort);
        }
        url.searchParams.set('page', page);

        const response = await fetch(`${currentPath}?${url.searchParams.toString()}`, {
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        });

        const data = await response.json();
        
        if (data.products && data.products.length > 0) {
            const productsHTML = data.products
                .map(product => `
                    <div class="col-6 col-sm-4 col-lg-3">
                        <div class="product-card">
                            <div class="product-image-container">
                                <button class="heart-btn" data-product-id="${product._id}">
                                    <i class="fa-regular fa-heart"></i>
                                </button>
                                  <a href="/user/buy?id=${product._id}" class="product-link">
                                    <img src="${product.variants[0]?.productImage?.[0] || '/images/default-product.jpg'}" 
                                         alt="${product.productName}" 
                                         class="img-fluid">
                                </a>
                            </div>
                            <h3 class="product-title">${product.productName}</h3>
                            <div class="price-section">
                                ${product.discount > 0 
                                    ? `<p class="card-text mb-0">
                                        <span class="original-price text-muted text-decoration-line-through">
                                            Rs/-${product.originalPrice}
                                        </span>
                                        <span class="discounted-price ms-2">
                                            Rs/-${product.finalPrice}
                                        </span>
                                       </p>
                                       <div class="offer-badge">
                                           <span class="badge bg-danger">
                                               ${product.discount}% OFF - ${product.offerName}
                                           </span>
                                       </div>`
                                    : `<p class="product-price" style="font-weight: bolder;">
                                        Rs/-${product.originalPrice}
                                       </p>`
                                }
                            </div>
                        </div>
                    </div>
                `).join('');
            
            // Update the products grid
            const productsGrid = document.querySelector('.row.g-2.g-sm-3.g-md-4');
            if (productsGrid) {
                productsGrid.innerHTML = productsHTML;
            }

            updateCartCounter();
            attachWishlistListeners();
            updateWishlistCounter();

           

            // Update pagination if it exists
            const paginationContainer = document.querySelector('.pagination-container');
            if (paginationContainer && data.totalPages > 1) {
                paginationContainer.innerHTML = createPagination(data);
                attachPaginationListeners();
            }

            // Update URL without page reload
            window.history.pushState({}, '', `${currentPath}?${url.searchParams.toString()}`);

        } else {
            // Show no results message
            const productsGrid = document.querySelector('.row.g-2.g-sm-3.g-md-4');
            if (productsGrid) {
                productsGrid.innerHTML = `
                    <div class="col-12 text-center py-5">
                        <h3>No products found</h3>
                        <p>Try different search terms or browse our categories</p>
                    </div>`;
            }
        }

    } catch (error) {
        console.error('Error performing search:', error);
    }
}


if (searchInput) {
    let searchTimeout;
    
 
    searchInput.addEventListener('input', function() {
        clearTimeout(searchTimeout);
        const query = this.value;

        searchTimeout = setTimeout(() => {
            handleSearchSuggestions(query);
        }, 300); // Debounce time
    });

    
    searchForm.addEventListener('submit', function(e) {
        e.preventDefault();
        const query = searchInput.value.trim();
        if (query) {
            searchSuggestions.classList.add('d-none');
            performSearch(query, sortSelect.value);
        }
    });

  
    document.addEventListener('click', function(e) {
        if (!searchInput.contains(e.target) && !searchSuggestions.contains(e.target)) {
            searchSuggestions.classList.add('d-none');
        }
    });
}


    function updateURLParameter(url, param, value) {
        const regex = new RegExp(`([?&])${param}=.*?(&|$)`, 'i');
        const separator = url.indexOf('?') !== -1 ? '&' : '?';
        
        if (url.match(regex)) {
            return url.replace(regex, `$1${param}=${value}$2`);
        }
        return `${url}${separator}${param}=${value}`;
    }


    function createProductCard(product) {
        return `
            <div class="col-6 col-sm-4 col-lg-3">
                <div class="product-card">
                    <div class="product-image-container">
                        <button class="heart-btn" data-product-id="${product._id}">
                            <i class="fa-regular fa-heart"></i>
                        </button>
                        <a href="/user/buy?id=${product._id}" class="product-link">
                            <img src="${product.variants[0]?.productImage?.[0] || '/images/default-product.jpg'}" 
                                 alt="${product.productName}" 
                                 class="img-fluid">
                        </a>
                    </div>
                    <h3 class="product-title">${product.productName}</h3>
                    <div class="price-section">
                        ${product.discount > 0 
                            ? `<p class="card-text mb-0">
                                <span class="original-price text-muted text-decoration-line-through">
                                    Rs/-${product.originalPrice}
                                </span>
                                <span class="discounted-price ms-2">
                                    Rs/-${product.finalPrice}
                                </span>
                               </p>
                               <div class="offer-badge">
                                   <span class="badge bg-danger">
                                       ${product.discount}% OFF - ${product.offerName}
                                   </span>
                               </div>`
                            : `<p class="product-price" style="font-weight: bolder;">
                                Rs/-${product.originalPrice}
                               </p>`
                        }
                    </div>
                </div>
            </div>`;


          
    }


    function createPagination(data) {
        if (!data.totalPages || data.totalPages <= 1) return '';
        
        let html = `
            <nav aria-label="Product pagination">
                <ul class="pagination">`;

        if (data.hasPrevPage) {
            html += `
                <li class="page-item">
                    <a class="page-link" href="#" data-page="${data.prevPage}">Previous</a>
                </li>`;
        }

        for (let i = 1; i <= data.totalPages; i++) {
            html += `
                <li class="page-item ${i === data.currentPage ? 'active' : ''}">
                    <a class="page-link" href="#" data-page="${i}">${i}</a>
                </li>`;
        }

        if (data.hasNextPage) {
            html += `
                <li class="page-item">
                    <a class="page-link" href="#" data-page="${data.nextPage}">Next</a>
                </li>`;
        }

        html += `
                </ul>
            </nav>`;
        return html;
    }

  
   
    async function updateProducts(sort, page = 1) {
        try {
            const currentUrl = new URL(window.location.href);
            const updatedUrl = updateURLParameter(currentUrl.toString(), 'sort', sort);
            const finalUrl = updateURLParameter(updatedUrl, 'page', page);
            
            // Update URL without reload
            window.history.pushState({}, '', finalUrl);

            const response = await fetch(`${finalUrl}&xhr=true`, {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            });

            const data = await response.json();
            
            
            let productsHTML = '';
            data.products.forEach(product => {
                productsHTML += createProductCard(product);
            });
            productsGrid.innerHTML = productsHTML;

           
            if (paginationContainer) {
                paginationContainer.innerHTML = createPagination(data);
                attachPaginationListeners();
            }

           
            attachWishlistListeners()
            updateWishlistCounter();
            updateCartCounter()
            

        } catch (error) {
            console.error('Error updating products:', error);
        }
    }

    const sortSelect = document.getElementById('sortSelect');
    if (sortSelect) {
        sortSelect.addEventListener('change', function() {
            const currentQuery = new URL(window.location.href).searchParams.get('search') || '';
            performSearch(currentQuery, this.value);
        });
    }
});






   async function updateCartCounter(){
    try {
        const response  = await fetch('/user/cart/count');

        if (!response.ok) {
            throw new Error('Failed to fetch cart count');
        }

        const data = await response.json();
        console.log("cart counter",data )
        const counter = document.getElementById('cartCounter');

        if(counter){
            counter.textContent = data.count || '0';

            counter.style.display = data.count >0 ? "block" : "none";
        }


    } catch (error) {
        console.log("error in cart counter",error.message);
        
    }
   }

   // for updating wishlist counter
     async function updateWishlistCounter() {
      try {
        const response = await fetch('/user/wishlist/count');
        const data = await response.json();

        const wishlistCounter = document.getElementById('wishlist-counter');
        if (wishlistCounter) {
            wishlistCounter.textContent = data.wishlistCount;
            wishlistCounter.style.display = data.wishlistCount > 0 ? 'inline-block' : 'none';
        }


     } catch (error) {
        console.error("Error updating wishlist counter:", error);
     }
 }
// ========   FOR REMOVING SUGGETIONS WHILE CLICKING ON OUTSIDE =========



    </script>